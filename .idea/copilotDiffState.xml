<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Archive&#10;  type: http&#10;  seq: 15&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/archive/cancel/:tracker-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  tracker-id: archive123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Upload&#10;  type: http&#10;  seq: 6&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/cancel/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Copy Files&#10;  type: http&#10;  seq: 7&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/copy&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Create New Entry&#10;  type: http&#10;  seq: 11&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/new&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;path&quot;: &quot;new-folder&quot;,&#10;    &quot;is_directory&quot;: true&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Delete Files&#10;  type: http&#10;  seq: 10&#10;}&#10;&#10;delete {&#10;  url: {{baseurl}}/server/:server-id/fs/&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;paths&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;, &quot;file2.txt&quot;]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id:&#10;}" />
              <option name="updatedContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?filepath&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath:&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?path=&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  path: &#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Move Files&#10;  type: http&#10;  seq: 8&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/move&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Rename File&#10;  type: http&#10;  seq: 9&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/rename&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;source&quot;: &quot;oldfile.txt&quot;,&#10;    &quot;destination&quot;: &quot;newfile.txt&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Search Files&#10;  type: http&#10;  seq: 12&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/search?q=config&amp;filename_only=false&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  q: config&#10;  filename_only: false&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru" />
              <option name="originalContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?filepath=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath: example.txt&#10;  server-id:&#10;  server-id:&#10;  server-id:&#10;  server-id:&#10;  server-id:&#10;  server-id:&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?upload_id=upload123&amp;path=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  upload_id: upload123&#10;  path: example.txt&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:text {&#10;  This is the content of the uploaded file.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Upload Progress&#10;  type: http&#10;  seq: 5&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/progress/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Cargo.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Cargo.toml" />
              <option name="originalContent" value="[package]&#10;name = &quot;obsidian_server_panel&quot;&#10;version = &quot;0.0.0&quot;&#10;edition = &quot;2024&quot;&#10;authors = [&quot;Drew Chase (Work) &lt;dcmanproductions@gmail.com&gt;&quot;]&#10;build = &quot;src-actix/build.rs&quot;&#10;&#10;[[bin]]&#10;name = &quot;obsidian_server_panel&quot;&#10;path = &quot;src-actix/main.rs&quot;&#10;&#10;[lib]&#10;name = &quot;obsidian_server_panel_lib&quot;&#10;path = &quot;src-actix/lib.rs&quot;&#10;crate-type = [&quot;lib&quot;]&#10;&#10;[dependencies]&#10;actix-web = { version = &quot;4.9.0&quot; }&#10;actix-files = { version = &quot;0.6.6&quot; }&#10;actix-web-lab = { version = &quot;0.24.2&quot; }&#10;serde = { version = &quot;1.0.208&quot;, features = [&quot;derive&quot;] }&#10;serde_json = { version = &quot;1.0.125&quot; }&#10;pretty_env_logger = &quot;0.5.0&quot;&#10;include_dir = &quot;0.7.4&quot;&#10;walkdir = &quot;2.5.0&quot;&#10;log = &quot;0.4.22&quot;&#10;anyhow = &quot;1.0.95&quot;&#10;thiserror = &quot;2.0.11&quot;&#10;vite-actix = &quot;0.2.5&quot;&#10;chrono = { version = &quot;0.4.41&quot;, features = [&quot;serde&quot;] }&#10;sqlx = { version = &quot;0.8.6&quot;, features = [&quot;sqlite&quot;, &quot;chrono&quot;, &quot;json&quot;, &quot;runtime-tokio&quot;, &quot;derive&quot;, &quot;time&quot;] }&#10;serde_hash = { version = &quot;0.1.3&quot; }&#10;bcrypt = { version = &quot;0.17.0&quot; }&#10;enumflags2 = { version = &quot;0.7.12&quot;, features = [&quot;serde&quot;] }&#10;futures = &quot;0.3.31&quot;&#10;reqwest = { version = &quot;0.12.22&quot;, features = [&quot;json&quot;, &quot;stream&quot;] }&#10;sysinfo = { version = &quot;0.36.1&quot;, features = [&quot;multithread&quot;, &quot;disk&quot;, &quot;windows&quot;, &quot;system&quot;, &quot;user&quot;, &quot;network&quot;] }&#10;tokio = { version = &quot;1.46.1&quot;, features = [&quot;time&quot;, &quot;fs&quot;, &quot;rt-multi-thread&quot;, &quot;sync&quot;, &quot;rt&quot;, &quot;macros&quot;] }&#10;tokio-util = &quot;0.7.15&quot;&#10;regex = { version = &quot;1.11.1&quot;, features = [&quot;perf&quot;] }&#10;uuid = { version = &quot;1.17.0&quot;, features = [&quot;v4&quot;] }&#10;zip = &quot;3.0.0&quot;&#10;archflow = { version = &quot;0.1.4&quot;, features = [&quot;tokio&quot;] }&#10;tokio-interactive = { version = &quot;0.2.0&quot; }&#10;flate2 = { version = &quot;1.1.2&quot; }&#10;" />
              <option name="updatedContent" value="[package]&#10;name = &quot;obsidian_server_panel&quot;&#10;version = &quot;0.0.0&quot;&#10;edition = &quot;2024&quot;&#10;authors = [&quot;Drew Chase (Work) &lt;dcmanproductions@gmail.com&gt;&quot;]&#10;build = &quot;src-actix/build.rs&quot;&#10;&#10;[[bin]]&#10;name = &quot;obsidian_server_panel&quot;&#10;path = &quot;src-actix/main.rs&quot;&#10;&#10;[lib]&#10;name = &quot;obsidian_server_panel_lib&quot;&#10;path = &quot;src-actix/lib.rs&quot;&#10;crate-type = [&quot;lib&quot;]&#10;&#10;[dependencies]&#10;actix-web = { version = &quot;4.9.0&quot; }&#10;actix-files = { version = &quot;0.6.6&quot; }&#10;actix-web-lab = { version = &quot;0.24.2&quot; }&#10;serde = { version = &quot;1.0.208&quot;, features = [&quot;derive&quot;] }&#10;serde_json = { version = &quot;1.0.125&quot; }&#10;pretty_env_logger = &quot;0.5.0&quot;&#10;include_dir = &quot;0.7.4&quot;&#10;walkdir = &quot;2.5.0&quot;&#10;log = &quot;0.4.22&quot;&#10;anyhow = &quot;1.0.95&quot;&#10;thiserror = &quot;2.0.11&quot;&#10;vite-actix = &quot;0.2.5&quot;&#10;chrono = { version = &quot;0.4.41&quot;, features = [&quot;serde&quot;] }&#10;sqlx = { version = &quot;0.8.6&quot;, features = [&quot;sqlite&quot;, &quot;chrono&quot;, &quot;json&quot;, &quot;runtime-tokio&quot;, &quot;derive&quot;, &quot;time&quot;] }&#10;serde_hash = { version = &quot;0.1.3&quot; }&#10;bcrypt = { version = &quot;0.17.0&quot; }&#10;enumflags2 = { version = &quot;0.7.12&quot;, features = [&quot;serde&quot;] }&#10;futures = &quot;0.3.31&quot;&#10;reqwest = { version = &quot;0.12.22&quot;, features = [&quot;json&quot;, &quot;stream&quot;] }&#10;sysinfo = { version = &quot;0.36.1&quot;, features = [&quot;multithread&quot;, &quot;disk&quot;, &quot;windows&quot;, &quot;system&quot;, &quot;user&quot;, &quot;network&quot;] }&#10;tokio = { version = &quot;1.46.1&quot;, features = [&quot;time&quot;, &quot;fs&quot;, &quot;rt-multi-thread&quot;, &quot;sync&quot;, &quot;rt&quot;, &quot;macros&quot;] }&#10;tokio-util = &quot;0.7.15&quot;&#10;regex = { version = &quot;1.11.1&quot;, features = [&quot;perf&quot;] }&#10;uuid = { version = &quot;1.17.0&quot;, features = [&quot;v4&quot;] }&#10;zip = &quot;3.0.0&quot;&#10;archflow = { version = &quot;0.1.4&quot;, features = [&quot;tokio&quot;] }&#10;tokio-interactive = { version = &quot;0.2.0&quot; }&#10;flate2 = { version = &quot;1.1.2&quot; }&#10;tar = &quot;0.4.44&quot;&#10;obsidian-upnp = { git = &quot;https://github.com/Obsidian-Minecraft-Server-Portal/upnp.git&quot; }&#10;&#10;[build-dependencies]&#10;include_dir = &quot;0.7.4&quot;&#10;walkdir = &quot;2.5.0&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src-actix/server/filesystem/mod.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src-actix/server/filesystem/mod.rs" />
              <option name="originalContent" value="mod filesystem_data;&#10;mod filesystem_endpoint;&#10;mod download_parameters;&#10;mod archive_wrapper;&#10;" />
              <option name="updatedContent" value="mod filesystem_data;&#13;&#10;mod filesystem_endpoint;&#13;&#10;mod download_parameters;&#13;&#10;mod archive_wrapper;&#13;&#10;mod extract_wrapper;&#13;&#10;mod normalize_path;&#13;&#10;&#13;&#10;pub use filesystem_endpoint::configure;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/MessageModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/MessageModal.tsx" />
              <option name="originalContent" value="import {Button, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {ReactNode} from &quot;react&quot;;&#10;&#10;export type MessageOptions = {&#10;    title: string;&#10;    body: ReactNode | string;&#10;    responseType: MessageResponseType;&#10;    severity?: &quot;info&quot; | &quot;warning&quot; | &quot;danger&quot; | &quot;success&quot;;&#10;    icon?: ReactNode | string;&#10;}&#10;&#10;type MessageProperties = {&#10;    isOpen: boolean;&#10;    onClose: (response: boolean | null) =&gt; void;&#10;} &amp; MessageOptions;&#10;&#10;export enum MessageResponseType&#10;{&#10;    YesNo,&#10;    OkayCancel,&#10;    Close,&#10;}&#10;&#10;export default function MessageModal(props: MessageProperties)&#10;{&#10;    const {&#10;        title,&#10;        body,&#10;        responseType,&#10;        icon,&#10;        severity,&#10;        isOpen,&#10;        onClose&#10;    } = props;&#10;" />
              <option name="updatedContent" value="import {Button, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {ReactNode, useEffect} from &quot;react&quot;;&#10;&#10;export type MessageOptions = {&#10;    title: string;&#10;    body: ReactNode | string;&#10;    responseType: MessageResponseType;&#10;    severity?: &quot;info&quot; | &quot;warning&quot; | &quot;danger&quot; | &quot;success&quot;;&#10;    icon?: ReactNode | string;&#10;}&#10;&#10;type MessageProperties = {&#10;    isOpen: boolean;&#10;    onClose: (response: boolean | null) =&gt; void;&#10;} &amp; MessageOptions;&#10;&#10;export enum MessageResponseType&#10;{&#10;    YesNo,&#10;    OkayCancel,&#10;    Close,&#10;}&#10;&#10;export default function MessageModal(props: MessageProperties)&#10;{&#10;    const {&#10;        title,&#10;        body,&#10;        responseType,&#10;        icon,&#10;        severity,&#10;        isOpen,&#10;        onClose&#10;    } = props;&#10;&#10;    // Handle keyboard events for Enter and Space&#10;    useEffect(() =&gt; {&#10;        if (!isOpen) return;&#10;&#10;        const handleKeyDown = (event: KeyboardEvent) =&gt; {&#10;            if (event.key === 'Enter' || event.key === ' ') {&#10;                event.preventDefault();&#10;                event.stopPropagation();&#10;                // Trigger the primary action (Yes/Okay/Close)&#10;                onClose(true);&#10;            }&#10;        };&#10;&#10;        // Add event listener when modal is open&#10;        document.addEventListener('keydown', handleKeyDown);&#10;&#10;        // Cleanup event listener when modal closes or component unmounts&#10;        return () =&gt; {&#10;            document.removeEventListener('keydown', handleKeyDown);&#10;        };&#10;    }, [isOpen, onClose]);&#10;&#10;    return (&#10;        &lt;Modal&#10;            isOpen={isOpen}&#10;            onClose={() =&gt; onClose(responseType === MessageResponseType.Close ? null : false)}&#10;            scrollBehavior={&quot;inside&quot;}&#10;            backdrop={&quot;blur&quot;}&#10;            radius={&quot;none&quot;}&#10;            closeButton={&lt;Icon icon={&quot;pixelarticons:close-box&quot;} width={24}/&gt;}&#10;            classNames={{&#10;                closeButton: &quot;rounded-none&quot;,&#10;                backdrop: severity === &quot;danger&quot; ? &quot;bg-danger/10&quot; : &quot;&quot;&#10;            }}&#10;            data-severity={severity}&#10;            isDismissable={false}&#10;        &gt;&#10;            &lt;ModalContent&gt;&#10;                {() =&gt; (&#10;                    &lt;&gt;&#10;                        &lt;ModalHeader className={&quot;flex flex-row items-center gap-2 text-2xl&quot;}&gt;&#10;                            &lt;span className={&quot;text-3xl h-[30px]&quot;}&gt;{typeof icon === &quot;string&quot; ? &lt;Icon icon={icon}/&gt; : icon == null ? &lt;MessageIcon severity={severity}/&gt; : icon}&lt;/span&gt;&#10;                            &lt;span&#10;                                className={&quot;data-[severity=danger]:text-danger data-[severity=warning]:text-warning data-[severity=info]:text-blue-500 data-[severity=success]:text-success&quot;}&#10;                                data-severity={severity}&#10;                            &gt;&#10;                                {title}&#10;                            &lt;/span&gt;&#10;                        &lt;/ModalHeader&gt;&#10;                        &lt;ModalBody&gt;&#10;                            {body}&#10;                        &lt;/ModalBody&gt;&#10;                        &lt;ModalFooter&gt;&#10;                            {({&#10;                                [MessageResponseType.YesNo]: (&#10;                                    &lt;&gt;&#10;                                        &lt;Button radius={&quot;none&quot;} onPress={() =&gt; onClose(true)} color={severity === &quot;danger&quot; ? &quot;danger&quot; : &quot;primary&quot;} autoFocus&gt;Yes&lt;/Button&gt;&#10;                                        &lt;Button radius={&quot;none&quot;} onPress={() =&gt; onClose(false)} variant={&quot;ghost&quot;}&gt;No&lt;/Button&gt;&#10;                                    &lt;/&gt;&#10;                                ),&#10;                                [MessageResponseType.OkayCancel]: (&#10;                                    &lt;&gt;&#10;                                        &lt;Button radius={&quot;none&quot;} onPress={() =&gt; onClose(true)} color={severity === &quot;danger&quot; ? &quot;danger&quot; : &quot;primary&quot;} autoFocus&gt;Okay&lt;/Button&gt;&#10;                                        &lt;Button radius={&quot;none&quot;} onPress={() =&gt; onClose(false)} variant={&quot;ghost&quot;}&gt;Cancel&lt;/Button&gt;&#10;                                    &lt;/&gt;&#10;                                ),&#10;                                [MessageResponseType.Close]: (&#10;                                    &lt;Button radius={&quot;none&quot;} onPress={() =&gt; onClose(true)} autoFocus&gt;Close&lt;/Button&gt;&#10;                                )&#10;                            })[responseType]}&#10;                        &lt;/ModalFooter&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/ModalContent&gt;&#10;        &lt;/Modal&gt;&#10;    );&#10;}&#10;&#10;const MessageIcon = ({severity}: { severity: &quot;info&quot; | &quot;warning&quot; | &quot;danger&quot; | &quot;success&quot; | undefined }) =&gt;&#10;{&#10;    switch (severity)&#10;    {&#10;        case &quot;info&quot;:&#10;            return &lt;Icon icon={&quot;pixelarticons:info-box&quot;} className={&quot;text-blue-500&quot;}/&gt;;&#10;        case &quot;warning&quot;:&#10;            return &lt;Icon icon={&quot;pixelarticons:warning-box&quot;} className={&quot;text-warning&quot;}/&gt;;&#10;        case &quot;danger&quot;:&#10;            return &lt;Icon icon={&quot;pixelarticons:alert&quot;} className={&quot;text-danger&quot;}/&gt;;&#10;        case &quot;success&quot;:&#10;            return &lt;Icon icon={&quot;pixelarticons:radio-on&quot;} className={&quot;text-success&quot;}/&gt;;&#10;        default:&#10;            return null;&#10;    }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/server-components/JavaExecutableSelector.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/server-components/JavaExecutableSelector.tsx" />
              <option name="originalContent" value="import {useJavaVersion} from &quot;../../providers/JavaVersionProvider.tsx&quot;;&#10;import {Button, Progress, Select, SelectItem, SelectSection} from &quot;@heroui/react&quot;;&#10;import {useCallback, useEffect, useState} from &quot;react&quot;;&#10;import {JavaVersion} from &quot;../../ts/java-versions.ts&quot;;&#10;import {Tooltip} from &quot;../extended/Tooltip.tsx&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {useMessage} from &quot;../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../MessageModal.tsx&quot;;&#10;&#10;type JavaExecutableSelectorProps = {&#10;    value?: string;&#10;    onVersionChange: (version: string | undefined) =&gt; void;&#10;    isDisabled: boolean&#10;}&#10;&#10;export default function JavaExecutableSelector(props: JavaExecutableSelectorProps)&#10;{&#10;    const {onVersionChange, value} = props;&#10;    const {open} = useMessage();&#10;    const {javaVersions, installVersion, refreshJavaVersions, uninstallVersion} = useJavaVersion();&#10;    const [selectedVersion, setSelectedVersion] = useState&lt;JavaVersion | undefined&gt;(undefined);&#10;    const [installationProgress, setInstallationProgress] = useState(0);&#10;    const [isInstalling, setIsInstalling] = useState(false);&#10;&#10;    // Initialize selectedVersion based on the value prop&#10;    useEffect(() =&gt; {&#10;        if (value &amp;&amp; javaVersions.length &gt; 0) {&#10;            const versionByExecutable = javaVersions.find(v =&gt; v.executable === value);&#10;            if (versionByExecutable &amp;&amp; versionByExecutable !== selectedVersion) {&#10;                setSelectedVersion(versionByExecutable);&#10;            }&#10;        } else if (!value &amp;&amp; selectedVersion) {&#10;            setSelectedVersion(undefined);&#10;        }&#10;    }, [value, javaVersions, selectedVersion]);&#10;&#10;    // Update the parent component whenever selectedVersion or javaVersions change&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedVersion &amp;&amp; selectedVersion.installed &amp;&amp; selectedVersion.executable)&#10;        {&#10;            onVersionChange(selectedVersion.executable);&#10;        } else&#10;        {&#10;            onVersionChange(undefined);&#10;        }&#10;    }, [selectedVersion, onVersionChange]);&#10;&#10;    // Update selectedVersion when javaVersions change (after install/uninstall)&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedVersion)&#10;        {&#10;            const updatedVersion = javaVersions.find(v =&gt; v.runtime === selectedVersion.runtime);&#10;            if (updatedVersion &amp;&amp; (updatedVersion.installed !== selectedVersion.installed || updatedVersion.executable !== selectedVersion.executable))&#10;            {&#10;                setSelectedVersion(updatedVersion);&#10;            }&#10;        }&#10;    }, [javaVersions, selectedVersion]);&#10;&#10;    const handleInstall = useCallback(async () =&gt;&#10;    {&#10;        if (!selectedVersion || selectedVersion.installed) return;&#10;&#10;        setInstallationProgress(0);&#10;        setIsInstalling(true);&#10;&#10;        try&#10;        {&#10;            await installVersion(selectedVersion.runtime, (progress) =&gt; setInstallationProgress(progress.progress));&#10;            await refreshJavaVersions();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to install Java version:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsInstalling(false);&#10;            setInstallationProgress(0);&#10;        }&#10;    }, [selectedVersion, installVersion, refreshJavaVersions]);&#10;&#10;    const handleUninstall = useCallback(async () =&gt;&#10;    {&#10;        if (!selectedVersion || !selectedVersion.installed) return;&#10;&#10;        try&#10;        {&#10;            await uninstallVersion(selectedVersion.runtime);&#10;            await refreshJavaVersions();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to uninstall Java version:&quot;, error);&#10;        }&#10;    }, [selectedVersion, uninstallVersion, refreshJavaVersions]);&#10;&#10;    return (&#10;        &lt;div className={&quot;flex flex-col gap-1&quot;}&gt;&#10;            &lt;div className={&quot;flex flex-row gap-2&quot;}&gt;&#10;                &lt;Select&#10;                    label={&quot;Java&quot;}&#10;                    placeholder={&quot;Select Java Version&quot;}&#10;                    radius={&quot;none&quot;}&#10;                    size={&quot;sm&quot;}&#10;                    className={&quot;font-minecraft-body&quot;}&#10;                    classNames={{listbox: &quot;font-minecraft-body&quot;}}&#10;                    disallowEmptySelection&#10;                    selectedKeys={selectedVersion ? [selectedVersion.runtime] : []}&#10;                    isDisabled={props.isDisabled}&#10;                    onSelectionChange={keys =&gt;&#10;                    {&#10;                        const key = [...keys][0];&#10;                        const selected = javaVersions.find(v =&gt; v.runtime == key);&#10;                        if (selected)&#10;                        {&#10;                            setSelectedVersion(selected);&#10;                        }&#10;                    }}&#10;                &gt;&#10;                    &lt;SelectSection title={&quot;Installed&quot;}&gt;&#10;                        {javaVersions.filter(v =&gt; v.installed &amp;&amp; v.executable != undefined).map((v) =&gt; (&#10;                            &lt;SelectItem&#10;                                key={v.runtime}&#10;                                textValue={`${v.version} (Installed)`}&#10;                            &gt;&#10;                                {v.version} ({v.executable})&#10;                            &lt;/SelectItem&gt;&#10;                        ))}&#10;                    &lt;/SelectSection&gt;&#10;                    &lt;SelectSection title={&quot;Available&quot;}&gt;&#10;                        {javaVersions.filter(v =&gt; !v.installed).map((v) =&gt; (&#10;                            &lt;SelectItem&#10;                                key={v.runtime}&#10;                                textValue={v.version}&#10;                            &gt;&#10;                                {v.version} &lt;span className={&quot;italic opacity-50&quot;}&gt;({v.runtime})&lt;/span&gt;&#10;                            &lt;/SelectItem&gt;&#10;                        ))}&#10;                    &lt;/SelectSection&gt;&#10;                &lt;/Select&gt;&#10;&#10;                {selectedVersion != undefined &amp;&amp; !selectedVersion.installed ?&#10;                    &lt;Tooltip content={&quot;Install this Java version&quot;}&gt;&#10;                        &lt;Button&#10;                            isIconOnly&#10;                            radius={&quot;none&quot;}&#10;                            size={&quot;lg&quot;}&#10;                            variant={&quot;ghost&quot;}&#10;                            color={&quot;primary&quot;}&#10;                            disabled={isInstalling}&#10;                            onPress={async () =&gt;&#10;                            {&#10;                                const response = await open({&#10;                                    title: &quot;Install Java&quot;,&#10;                                    body: `Are you sure you want to install Java ${selectedVersion.version}?`,&#10;                                    responseType: MessageResponseType.YesNo,&#10;                                    severity: &quot;info&quot;&#10;                                });&#10;                                if (response) await handleInstall();&#10;                            }}&#10;                        &gt;&#10;                            &lt;Icon icon={&quot;pixelarticons:download&quot;}/&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Tooltip&gt;&#10;                    : selectedVersion != undefined &amp;&amp; selectedVersion.installed ?&#10;                        &lt;Tooltip content={&quot;Uninstall this Java version&quot;}&gt;&#10;                            &lt;Button&#10;                                isIconOnly&#10;                                radius={&quot;none&quot;}&#10;                                size={&quot;lg&quot;}&#10;                                color={&quot;danger&quot;}&#10;                                variant={&quot;ghost&quot;}&#10;                                onPress={async () =&gt;&#10;                                {&#10;                                    const response = await open({&#10;                                        title: &quot;Uninstall Java&quot;,&#10;                                        body: `Are you sure you want to uninstall Java ${selectedVersion.version}?`,&#10;                                        responseType: MessageResponseType.OkayCancel,&#10;                                        severity: &quot;danger&quot;&#10;                                    });&#10;                                    if (response) await handleUninstall();&#10;                                }}&#10;                            &gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:trash&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt; : null&#10;                }&#10;&#10;            &lt;/div&gt;&#10;            {isInstalling &amp;&amp;&#10;                &lt;Progress&#10;                    size={&quot;sm&quot;}&#10;                    minValue={0}&#10;                    maxValue={1}&#10;                    value={installationProgress}&#10;                /&gt;&#10;            }&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import {useJavaVersion} from &quot;../../providers/JavaVersionProvider.tsx&quot;;&#10;import {Button, Progress, Select, SelectItem, SelectSection} from &quot;@heroui/react&quot;;&#10;import {useCallback, useEffect, useState} from &quot;react&quot;;&#10;import {JavaVersion} from &quot;../../ts/java-versions.ts&quot;;&#10;import {Tooltip} from &quot;../extended/Tooltip.tsx&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {useMessage} from &quot;../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../MessageModal.tsx&quot;;&#10;&#10;type JavaExecutableSelectorProps = {&#10;    value?: string;&#10;    onVersionChange: (version: string | undefined) =&gt; void;&#10;    isDisabled: boolean&#10;}&#10;&#10;export default function JavaExecutableSelector(props: JavaExecutableSelectorProps)&#10;{&#10;    const {onVersionChange, value} = props;&#10;    const {open} = useMessage();&#10;    const {javaVersions, installVersion, refreshJavaVersions, uninstallVersion} = useJavaVersion();&#10;    const [selectedVersion, setSelectedVersion] = useState&lt;JavaVersion | undefined&gt;(undefined);&#10;    const [installationProgress, setInstallationProgress] = useState(0);&#10;    const [isInstalling, setIsInstalling] = useState(false);&#10;&#10;    // Initialize selectedVersion based on the value prop when javaVersions are loaded&#10;    useEffect(() =&gt; {&#10;        if (javaVersions.length &gt; 0) {&#10;            if (value) {&#10;                const versionByExecutable = javaVersions.find(v =&gt; v.executable === value);&#10;                if (versionByExecutable !== selectedVersion) {&#10;                    setSelectedVersion(versionByExecutable);&#10;                }&#10;            } else if (!value &amp;&amp; selectedVersion) {&#10;                setSelectedVersion(undefined);&#10;            }&#10;        }&#10;    }, [value, javaVersions]); // Removed selectedVersion from dependencies to avoid circular updates&#10;&#10;    // Update selectedVersion when javaVersions change (after install/uninstall)&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedVersion)&#10;        {&#10;            const updatedVersion = javaVersions.find(v =&gt; v.runtime === selectedVersion.runtime);&#10;            if (updatedVersion &amp;&amp; (updatedVersion.installed !== selectedVersion.installed || updatedVersion.executable !== selectedVersion.executable))&#10;            {&#10;                setSelectedVersion(updatedVersion);&#10;            }&#10;        }&#10;    }, [javaVersions, selectedVersion]);&#10;&#10;    // Only notify parent when there's an actual change in selection&#10;    useEffect(() =&gt;&#10;    {&#10;        const newExecutable = selectedVersion?.installed &amp;&amp; selectedVersion?.executable ? selectedVersion.executable : undefined;&#10;        onVersionChange(newExecutable);&#10;    }, [selectedVersion?.executable, selectedVersion?.installed, onVersionChange]);&#10;&#10;    const handleInstall = useCallback(async () =&gt;&#10;    {&#10;        if (!selectedVersion || selectedVersion.installed) return;&#10;&#10;        setInstallationProgress(0);&#10;        setIsInstalling(true);&#10;&#10;        try&#10;        {&#10;            await installVersion(selectedVersion.runtime, (progress) =&gt; setInstallationProgress(progress.progress));&#10;            await refreshJavaVersions();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to install Java version:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsInstalling(false);&#10;            setInstallationProgress(0);&#10;        }&#10;    }, [selectedVersion, installVersion, refreshJavaVersions]);&#10;&#10;    const handleUninstall = useCallback(async () =&gt;&#10;    {&#10;        if (!selectedVersion || !selectedVersion.installed) return;&#10;&#10;        try&#10;        {&#10;            await uninstallVersion(selectedVersion.runtime);&#10;            await refreshJavaVersions();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to uninstall Java version:&quot;, error);&#10;        }&#10;    }, [selectedVersion, uninstallVersion, refreshJavaVersions]);&#10;&#10;    return (&#10;        &lt;div className={&quot;flex flex-col gap-1&quot;}&gt;&#10;            &lt;div className={&quot;flex flex-row gap-2&quot;}&gt;&#10;                &lt;Select&#10;                    label={&quot;Java&quot;}&#10;                    placeholder={&quot;Select Java Version&quot;}&#10;                    radius={&quot;none&quot;}&#10;                    size={&quot;sm&quot;}&#10;                    className={&quot;font-minecraft-body&quot;}&#10;                    classNames={{listbox: &quot;font-minecraft-body&quot;}}&#10;                    disallowEmptySelection&#10;                    selectedKeys={selectedVersion ? [selectedVersion.runtime] : []}&#10;                    isDisabled={props.isDisabled}&#10;                    onSelectionChange={keys =&gt;&#10;                    {&#10;                        const key = [...keys][0];&#10;                        const selected = javaVersions.find(v =&gt; v.runtime == key);&#10;                        if (selected)&#10;                        {&#10;                            setSelectedVersion(selected);&#10;                        }&#10;                    }}&#10;                &gt;&#10;                    &lt;SelectSection title={&quot;Installed&quot;}&gt;&#10;                        {javaVersions.filter(v =&gt; v.installed &amp;&amp; v.executable != undefined).map((v) =&gt; (&#10;                            &lt;SelectItem&#10;                                key={v.runtime}&#10;                                textValue={`${v.version} (Installed)`}&#10;                            &gt;&#10;                                {v.version} ({v.executable})&#10;                            &lt;/SelectItem&gt;&#10;                        ))}&#10;                    &lt;/SelectSection&gt;&#10;                    &lt;SelectSection title={&quot;Available&quot;}&gt;&#10;                        {javaVersions.filter(v =&gt; !v.installed).map((v) =&gt; (&#10;                            &lt;SelectItem&#10;                                key={v.runtime}&#10;                                textValue={v.version}&#10;                            &gt;&#10;                                {v.version} &lt;span className={&quot;italic opacity-50&quot;}&gt;({v.runtime})&lt;/span&gt;&#10;                            &lt;/SelectItem&gt;&#10;                        ))}&#10;                    &lt;/SelectSection&gt;&#10;                &lt;/Select&gt;&#10;&#10;                {selectedVersion != undefined &amp;&amp; !selectedVersion.installed ?&#10;                    &lt;Tooltip content={&quot;Install this Java version&quot;}&gt;&#10;                        &lt;Button&#10;                            isIconOnly&#10;                            radius={&quot;none&quot;}&#10;                            size={&quot;lg&quot;}&#10;                            variant={&quot;ghost&quot;}&#10;                            color={&quot;primary&quot;}&#10;                            disabled={isInstalling}&#10;                            onPress={async () =&gt;&#10;                            {&#10;                                const response = await open({&#10;                                    title: &quot;Install Java&quot;,&#10;                                    body: `Are you sure you want to install Java ${selectedVersion.version}?`,&#10;                                    responseType: MessageResponseType.YesNo,&#10;                                    severity: &quot;info&quot;&#10;                                });&#10;                                if (response) await handleInstall();&#10;                            }}&#10;                        &gt;&#10;                            &lt;Icon icon={&quot;pixelarticons:download&quot;}/&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Tooltip&gt;&#10;                    : selectedVersion != undefined &amp;&amp; selectedVersion.installed ?&#10;                        &lt;Tooltip content={&quot;Uninstall this Java version&quot;}&gt;&#10;                            &lt;Button&#10;                                isIconOnly&#10;                                radius={&quot;none&quot;}&#10;                                size={&quot;lg&quot;}&#10;                                color={&quot;danger&quot;}&#10;                                variant={&quot;ghost&quot;}&#10;                                onPress={async () =&gt;&#10;                                {&#10;                                    const response = await open({&#10;                                        title: &quot;Uninstall Java&quot;,&#10;                                        body: `Are you sure you want to uninstall Java ${selectedVersion.version}?`,&#10;                                        responseType: MessageResponseType.OkayCancel,&#10;                                        severity: &quot;danger&quot;&#10;                                    });&#10;                                    if (response) await handleUninstall();&#10;                                }}&#10;                            &gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:trash&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt; : null&#10;                }&#10;&#10;            &lt;/div&gt;&#10;            {isInstalling &amp;&amp;&#10;                &lt;Progress&#10;                    size={&quot;sm&quot;}&#10;                    minValue={0}&#10;                    maxValue={1}&#10;                    value={installationProgress}&#10;                /&gt;&#10;            }&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/RowContextMenu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/RowContextMenu.tsx" />
              <option name="originalContent" value="import {Listbox, ListboxItem, ListboxSection} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import {useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;&#10;" />
              <option name="updatedContent" value="import {Listbox, ListboxItem, ListboxSection} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import {useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;&#10;// Helper function to check if a file is an archive&#10;const isArchiveFile = (filename: string): boolean =&gt; {&#10;    const archiveExtensions = ['.zip', '.tar.gz', '.tgz', '.tar', '.rar', '.7z'];&#10;    const lowerFilename = filename.toLowerCase();&#10;    return archiveExtensions.some(ext =&gt; lowerFilename.endsWith(ext));&#10;};&#10;&#10;// Helper function to get archive name without extension&#10;const getArchiveBaseName = (filename: string): string =&gt; {&#10;    if (filename.toLowerCase().endsWith('.tar.gz')) {&#10;        return filename.slice(0, -7); // Remove .tar.gz&#10;    } else if (filename.toLowerCase().endsWith('.tgz')) {&#10;        return filename.slice(0, -4); // Remove .tgz&#10;    } else {&#10;        // Remove last extension for other formats&#10;        const lastDotIndex = filename.lastIndexOf('.');&#10;        return lastDotIndex &gt; 0 ? filename.slice(0, lastDotIndex) : filename;&#10;    }&#10;};&#10;&#10;export type ContextMenuOptions = {&#10;    entry?: FilesystemEntry | FilesystemEntry[];&#10;    x: number;&#10;    y: number;&#10;    isOpen: boolean;&#10;}&#10;type RowContextMenuProps = {&#10;    onRename: (entry: FilesystemEntry) =&gt; void;&#10;    onDelete: (entry: FilesystemEntry[]) =&gt; void;&#10;    onArchive: (entry: FilesystemEntry[]) =&gt; void;&#10;    onExtract: (entry: FilesystemEntry, outputPath?: string) =&gt; void;&#10;    onEdit: (entry: FilesystemEntry) =&gt; void;&#10;    onClose: () =&gt; void;&#10;} &amp; ContextMenuOptions;&#10;&#10;export function RowContextMenu({entry, y, x, isOpen, onClose, onRename, onDelete, onArchive, onEdit, onExtract}: RowContextMenuProps)&#10;{&#10;    const {downloadEntry} = useServer();&#10;    const [position, setPosition] = useState({x, y});&#10;    const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;&#10;    const downloadSelectedEntries = useCallback(async () =&gt;&#10;    {&#10;        if (!entry || !isOpen) return;&#10;        onClose();&#10;        await downloadEntry(entry);&#10;    }, [entry, downloadEntry, isOpen]);&#10;&#10;    const deleteSelectedEntries = useCallback(async () =&gt;&#10;    {&#10;        if (!entry || !isOpen) return;&#10;&#10;        onClose();&#10;        if (Array.isArray(entry)) onDelete(entry);&#10;        else onDelete([entry]);&#10;    }, [entry, isOpen]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        let parent = $(&quot;#server-file-browser&quot;);&#10;        let menu = menuRef.current;&#10;        if (parent.length === 0 || !menu) return;&#10;        let menuElement = $(menu);&#10;&#10;        let offset = parent.offset();&#10;        let parentWidth = parent.width();&#10;        let parentHeight = parent.height();&#10;        let menuWidth = menuElement.outerWidth();&#10;        let menuHeight = menuElement.outerHeight();&#10;        if (!offset || !menuWidth || !menuHeight || !parentWidth || !parentHeight) return;&#10;&#10;&#10;        let newX = x;&#10;        let newY = y;&#10;        if (newX + menuWidth &gt; offset.left + parentWidth)&#10;        {&#10;            newX = (offset.left + parentWidth) - menuWidth - 10; // 10px padding&#10;        }&#10;        if (newY + menuHeight &gt; offset.top + parentHeight)&#10;        {&#10;            newY = (offset.top + parentHeight) - menuHeight - 10; // 10px padding&#10;        }&#10;&#10;        setPosition({x: newX - 50, y: newY - 340});&#10;    }, [x, y, isOpen, onClose]);&#10;    return (&#10;        &lt;Listbox&#10;            id={&quot;server-files-context-menu&quot;}&#10;            ref={menuRef}&#10;            className={&quot;absolute z-50 w-64 bg-background/50 backdrop-blur-sm border border-primary/50 shadow-lg data-[open=true]:opacity-100 data-[open=false]:opacity-0 transition-opacity duration-200 data-[open=false]:pointer-events-none font-minecraft-body&quot;}&#10;            style={{top: position.y, left: position.x}}&#10;            itemClasses={{base: &quot;rounded-none font-minecraft-body&quot;}}&#10;            data-open={isOpen}&#10;            onSelectionChange={() =&gt; onClose()}&#10;            tabIndex={1}&#10;        &gt;&#10;            &lt;ListboxSection title={Array.isArray(entry) ? `${entry.length} Items Selected` : entry?.filename ?? &quot;&quot;} itemClasses={{base: &quot;rounded-none font-minecraft-body&quot;}}&gt;&#10;                {!Array.isArray(entry) &amp;&amp; entry ? (() =&gt;&#10;                {&#10;                    let singleItemOptions = [];&#10;                    if (!entry?.is_dir &amp;&amp; isTextFile(entry?.path))&#10;                    {&#10;                        singleItemOptions.push(&#10;                            &lt;ListboxItem key={&quot;edit&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:edit-box&quot;}/&gt;} onPress={() =&gt; onEdit(entry)}&gt;Edit&lt;/ListboxItem&gt;&#10;                        );&#10;                    }&#10;&#10;                    // Add extract options for archive files&#10;                    if (!entry?.is_dir &amp;&amp; isArchiveFile(entry?.filename))&#10;                    {&#10;                        const archiveBaseName = getArchiveBaseName(entry.filename);&#10;                        singleItemOptions.push(&#10;                            &lt;ListboxItem key={&quot;extract-here&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:extract&quot;}/&gt;} onPress={() =&gt; {&#10;                                onExtract(entry);&#10;                                onClose();&#10;                            }}&gt;Extract Here&lt;/ListboxItem&gt;&#10;                        );&#10;                        singleItemOptions.push(&#10;                            &lt;ListboxItem key={&quot;extract-to-folder&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:folder-open&quot;}/&gt;} onPress={() =&gt; {&#10;                                onExtract(entry, archiveBaseName);&#10;                                onClose();&#10;                            }}&gt;Extract to {archiveBaseName}&lt;/ListboxItem&gt;&#10;                        );&#10;                    }&#10;&#10;                    return (&#10;                        &lt;&gt;&#10;                            {...singleItemOptions}&#10;                            &lt;ListboxItem key={&quot;rename&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:unlink&quot;}/&gt;} onPress={() =&gt;&#10;                            {&#10;                                onRename(entry);&#10;                                onClose();&#10;                            }}&gt;Rename&lt;/ListboxItem&gt;&#10;                        &lt;/&gt;&#10;                    );&#10;                })() : null}&#10;                &lt;ListboxItem key={&quot;archive&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:archive&quot;}/&gt;} onPress={() =&gt; onArchive(Array.isArray(entry) ? entry : [entry] as FilesystemEntry[])}&gt;Archive&lt;/ListboxItem&gt;&#10;                &lt;ListboxItem key={&quot;download&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:flatten&quot;}/&gt;} onPress={downloadSelectedEntries}&gt;Download&lt;/ListboxItem&gt;&#10;                &lt;ListboxItem key={&quot;delete&quot;} color={&quot;danger&quot;} className={&quot;text-danger&quot;} endContent={&lt;Icon icon={&quot;pixelarticons:trash&quot;}/&gt;} onPress={deleteSelectedEntries}&gt;Delete&lt;/ListboxItem&gt;&#10;            &lt;/ListboxSection&gt;&#10;        &lt;/Listbox&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/server-components/server-page/options/ServerOptions.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/server-components/server-page/options/ServerOptions.tsx" />
              <option name="originalContent" value="import {Button, Divider, Input, Select, SelectItem, Switch, Tab, Tabs, Textarea} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import {LoaderType, useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import RamSlider from &quot;../../RamSlider.tsx&quot;;&#10;import JavaExecutableSelector from &quot;../../JavaExecutableSelector.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {MinecraftVersionSelector} from &quot;../../version-selectors/MinecraftVersionSelector.tsx&quot;;&#10;import {ForgeVersionSelector} from &quot;../../version-selectors/ForgeVersionSelector.tsx&quot;;&#10;import {FabricVersionSelector} from &quot;../../version-selectors/FabricVersionSelector.tsx&quot;;&#10;import {QuiltVersionSelector} from &quot;../../version-selectors/QuiltVersionSelector.tsx&quot;;&#10;import {NeoForgeVersionSelector} from &quot;../../version-selectors/NeoForgeVersionSelector.tsx&quot;;&#10;import {FileInput} from &quot;../../../extended/FileInput.tsx&quot;;&#10;import {NeoForge} from &quot;../../../icons/NeoForge.svg.tsx&quot;;&#10;import Quilt from &quot;../../../icons/Quilt.svg.tsx&quot;;&#10;import {getMinecraftVersionDownloadUrl} from &quot;../../../../ts/minecraft-versions.ts&quot;;&#10;&#10;export function ServerOptions()&#10;{&#10;    const {server, updateServer, getEntries, uploadFromUrl, uploadFile} = useServer();&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [isSaving, setIsSaving] = useState(false);&#10;&#10;    // Form state&#10;    const [name, setName] = useState(&quot;&quot;);&#10;    const [description, setDescription] = useState(&quot;&quot;);&#10;    const [javaExecutable, setJavaExecutable] = useState(&quot;&quot;);&#10;    const [javaArgs, setJavaArgs] = useState(&quot;&quot;);&#10;    const [minecraftArgs, setMinecraftArgs] = useState(&quot;&quot;);&#10;    const [maxMemory, setMaxMemory] = useState(4);&#10;    const [minMemory, setMinMemory] = useState(1);&#10;    const [serverJar, setServerJar] = useState(&quot;&quot;);&#10;    const [upnpEnabled, setUpnpEnabled] = useState(false);&#10;    const [autoStart, setAutoStart] = useState(false);&#10;    const [autoRestart, setAutoRestart] = useState(false);&#10;&#10;    // Loader configuration state&#10;    const [loaderType, setLoaderType] = useState&lt;LoaderType&gt;(&quot;vanilla&quot;);&#10;    const [minecraftVersion, setMinecraftVersion] = useState(&quot;&quot;);&#10;    const [loaderVersion, setLoaderVersion] = useState(&quot;&quot;);&#10;    const [loaderUrl, setLoaderUrl] = useState&lt;string | undefined&gt;(undefined);&#10;    const [customJarFile, setCustomJarFile] = useState&lt;File | undefined&gt;(undefined);&#10;    const [isUploadingLoader, setIsUploadingLoader] = useState(false);&#10;    const firstLoadStateRef = useRef(false);&#10;&#10;    // Available files&#10;    const [availableFiles, setAvailableFiles] = useState&lt;string[]&gt;([]);&#10;&#10;&#10;    const loadAvailableFiles = useCallback(async () =&gt;&#10;    {&#10;        if (!server) return;&#10;&#10;        setIsLoading(true);&#10;        try&#10;        {&#10;            const entries = await getEntries(&quot;&quot;);&#10;            const files = entries.entries&#10;                .filter(entry =&gt; !entry.is_dir)&#10;                .filter(entry =&gt;&#10;                {&#10;                    const name = entry.filename.toLowerCase();&#10;                    return name.endsWith(&quot;.jar&quot;) || name.endsWith(&quot;.bat&quot;) || name.endsWith(&quot;.sh&quot;);&#10;                })&#10;                .map(entry =&gt; entry.filename);&#10;&#10;            setAvailableFiles(files);&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to load server files:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsLoading(false);&#10;        }&#10;    }, [server, getEntries]);&#10;&#10;    const handleLoaderChange = useCallback((url: string | undefined, version: string | undefined) =&gt;&#10;    {&#10;        setLoaderUrl(url);&#10;        setLoaderVersion(version || &quot;&quot;);&#10;    }, []);&#10;&#10;    const generateNewJarFilename = useCallback(() =&gt;&#10;    {&#10;        if (loaderType === &quot;vanilla&quot; || loaderType === &quot;custom&quot;)&#10;        {&#10;            return `server-${minecraftVersion}.jar`;&#10;        }&#10;        return `${loaderType}-${loaderVersion}-${minecraftVersion}-server.jar`;&#10;    }, [loaderType, loaderVersion, minecraftVersion]);&#10;&#10;    const hasLoaderChanges = useCallback(() =&gt;&#10;    {&#10;        if (!server) return false;&#10;        return (&#10;            loaderType !== server.server_type ||&#10;            minecraftVersion !== server.minecraft_version ||&#10;            loaderVersion !== server.loader_version&#10;        );&#10;    }, [server, loaderType, minecraftVersion, loaderVersion]);&#10;&#10;    const handleSave = useCallback(async () =&gt;&#10;    {&#10;        if (!server) return;&#10;&#10;        setIsSaving(true);&#10;&#10;        try&#10;        {&#10;            let finalServerJar = serverJar;&#10;&#10;            // If loader configuration changed, upload a new server jar&#10;            if (hasLoaderChanges())&#10;            {&#10;                setIsUploadingLoader(true);&#10;                const newJarFilename = generateNewJarFilename();&#10;&#10;                if (loaderType !== &quot;custom&quot;)&#10;                {&#10;                    if (!loaderUrl &amp;&amp; loaderType !== &quot;vanilla&quot;)&#10;                    {&#10;                        throw new Error(`Loader URL is not defined for selected loader: ${loaderType}`);&#10;                    }&#10;&#10;                    await uploadFromUrl(&#10;                        loaderUrl ?? await getMinecraftVersionDownloadUrl(minecraftVersion),&#10;                        newJarFilename,&#10;                        (progress) =&gt; console.log(`Downloading ${loaderType} server: ${progress}%`),&#10;                        () =&gt; console.log(&quot;Download complete&quot;),&#10;                        (error) =&gt; console.error(&quot;Error uploading server jar:&quot;, error),&#10;                        server.id&#10;                    );&#10;                } else&#10;                {&#10;                    if (!customJarFile)&#10;                    {&#10;                        throw new Error(&quot;Please select a custom jar file.&quot;);&#10;                    }&#10;&#10;                    await uploadFile(&#10;                        customJarFile,&#10;                        newJarFilename,&#10;                        (bytes) =&gt; console.log(`Uploading custom jar: ${bytes} bytes`),&#10;                        () =&gt; console.log(&quot;Upload cancelled&quot;),&#10;                        server.id&#10;                    );&#10;                }&#10;&#10;                finalServerJar = newJarFilename;&#10;                setServerJar(newJarFilename);&#10;                setIsUploadingLoader(false);&#10;            }&#10;&#10;            await updateServer({&#10;                name,&#10;                description: description || null,&#10;                java_executable: javaExecutable,&#10;                java_args: javaArgs,&#10;                minecraft_args: minecraftArgs,&#10;                max_memory: maxMemory,&#10;                min_memory: minMemory,&#10;                server_jar: finalServerJar,&#10;                upnp: upnpEnabled,&#10;                auto_start: autoStart,&#10;                auto_restart: autoRestart,&#10;                // Update loader configuration&#10;                server_type: loaderType,&#10;                minecraft_version: minecraftVersion,&#10;                loader_version: loaderVersion&#10;            });&#10;&#10;            // Refresh file list after potential jar upload&#10;            if (hasLoaderChanges())&#10;            {&#10;                await loadAvailableFiles();&#10;            }&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to save server settings:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsSaving(false);&#10;            setIsUploadingLoader(false);&#10;        }&#10;    }, [&#10;        server, updateServer, name, description, javaExecutable, javaArgs,&#10;        minecraftArgs, maxMemory, minMemory, serverJar, upnpEnabled,&#10;        autoStart, autoRestart, loaderType, minecraftVersion, loaderVersion, hasLoaderChanges,&#10;        generateNewJarFilename, loaderUrl, customJarFile, uploadFromUrl,&#10;        uploadFile, loadAvailableFiles&#10;    ]);&#10;&#10;    const hasChanges = useCallback(() =&gt;&#10;    {&#10;        if (!server) return false;&#10;&#10;        return (&#10;            name !== server.name ||&#10;            description !== (server.description || &quot;&quot;) ||&#10;            javaExecutable !== server.java_executable ||&#10;            javaArgs !== server.java_args ||&#10;            minecraftArgs !== server.minecraft_args ||&#10;            maxMemory !== server.max_memory ||&#10;            minMemory !== server.min_memory ||&#10;            serverJar !== server.server_jar ||&#10;            upnpEnabled !== server.upnp ||&#10;            autoStart !== server.auto_start ||&#10;            autoRestart !== server.auto_restart ||&#10;            hasLoaderChanges()&#10;        );&#10;    }, [&#10;        server, name, description, javaExecutable, javaArgs, minecraftArgs,&#10;        maxMemory, minMemory, serverJar, upnpEnabled, autoStart, autoRestart,&#10;        hasLoaderChanges&#10;    ]);&#10;    // Load server data when the component mounts or server changes&#10;    useEffect(() =&gt;&#10;    {&#10;        if (server)&#10;        {&#10;            // Only load data once when the server is first set or when server ID changes&#10;            if (!firstLoadStateRef.current)&#10;            {&#10;                firstLoadStateRef.current = true;&#10;                setName(server.name);&#10;                setDescription(server.description || &quot;&quot;);&#10;                setJavaExecutable(server.java_executable);&#10;                setJavaArgs(server.java_args);&#10;                setMinecraftArgs(server.minecraft_args);&#10;                setMaxMemory(server.max_memory);&#10;                setMinMemory(server.min_memory);&#10;                setServerJar(server.server_jar);&#10;                setUpnpEnabled(server.upnp);&#10;                setAutoStart(server.auto_start);&#10;                setAutoRestart(server.auto_restart);&#10;&#10;                // Load loader configuration&#10;                setLoaderType(server.server_type);&#10;                setMinecraftVersion(server.minecraft_version);&#10;                setLoaderVersion(server.loader_version);&#10;            }&#10;&#10;            // Always refresh a file list when server changes&#10;            loadAvailableFiles();&#10;        } else&#10;        {&#10;            // Reset the ref when no server is selected&#10;            firstLoadStateRef.current = false;&#10;        }&#10;    }, [server, loadAvailableFiles, firstLoadStateRef]);&#10;&#10;    if (!server)&#10;    {&#10;        return (&#10;            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                &lt;p className=&quot;text-gray-500 font-minecraft-body&quot;&gt;No server selected&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;flex flex-col gap-4 p-6 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] overflow-y-auto&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-minecraft-header&quot;&gt;Server Configuration&lt;/h2&gt;&#10;                &lt;Button&#10;                    color=&quot;primary&quot;&#10;                    radius=&quot;none&quot;&#10;                    isLoading={isSaving || isUploadingLoader}&#10;                    isDisabled={!hasChanges()}&#10;                    onPress={handleSave}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:save&quot;/&gt;}&#10;                &gt;&#10;                    {isUploadingLoader ? &quot;Uploading Server...&quot; : &quot;Save Changes&quot;}&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Basic Information */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Basic Information&lt;/h3&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Server Name&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    value={name}&#10;                    onValueChange={setName}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:device-game-console&quot;/&gt;}&#10;                /&gt;&#10;&#10;                &lt;Textarea&#10;                    label=&quot;Description&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;Optional server description...&quot;&#10;                    value={description}&#10;                    onValueChange={setDescription}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:note&quot;/&gt;}&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Files */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Files&lt;/h3&gt;&#10;                    &lt;Tooltip content=&quot;Refresh file list&quot;&gt;&#10;                        &lt;Button&#10;                            isIconOnly&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;light&quot;&#10;                            radius=&quot;none&quot;&#10;                            isLoading={isLoading}&#10;                            onPress={loadAvailableFiles}&#10;                        &gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:reload&quot;/&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Tooltip&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;Select&#10;                    label=&quot;Server JAR File&quot;&#10;                    radius=&quot;none&quot;&#10;                    disallowEmptySelection&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    selectedKeys={serverJar ? [serverJar] : []}&#10;                    onSelectionChange={(keys) =&gt;&#10;                    {&#10;                        const selected = Array.from(keys)[0] as string;&#10;                        setServerJar(selected || &quot;&quot;);&#10;                    }}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:file&quot;/&gt;}&#10;                    placeholder=&quot;Select a server file...&quot;&#10;                    isLoading={isLoading}&#10;                    classNames={{&#10;                        base: &quot;capitalize&quot;,&#10;                        popoverContent: &quot;rounded-none border-primary border-1&quot;&#10;                    }}&#10;&#10;                    listboxProps={{&#10;                        itemClasses: {&#10;                            base: &quot;rounded-none font-minecraft-body&quot;&#10;                        }&#10;                    }}&#10;                &gt;&#10;                    {availableFiles.map((file) =&gt; (&#10;                        &lt;SelectItem key={file}&gt;&#10;                            {file}&#10;                        &lt;/SelectItem&gt;&#10;                    ))}&#10;                &lt;/Select&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Loader Configuration */}&#10;            &lt;section className=&quot;space-y-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Type &amp; Version&lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;mx-auto&quot;&gt;&#10;                    &lt;Tabs&#10;                        radius=&quot;none&quot;&#10;                        className=&quot;font-minecraft-body&quot;&#10;                        fullWidth&#10;                        variant=&quot;solid&quot;&#10;                        color=&quot;primary&quot;&#10;                        classNames={{&#10;                            tab: &quot;flex flex-col items-center justify-center h-24 w-28&quot;&#10;                        }}&#10;                        isDisabled={isSaving || isUploadingLoader}&#10;                        selectedKey={loaderType}&#10;                        onSelectionChange={(key) =&gt; setLoaderType(key as LoaderType)}&#10;                    &gt;&#10;                        &lt;Tab&#10;                            key=&quot;vanilla&quot;&#10;                            title={&#10;                                &lt;&gt;&#10;                                    &lt;Icon icon=&quot;heroicons:cube-transparent-16-solid&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Vanilla&lt;/p&gt;&#10;                                &lt;/&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;fabric&quot;&#10;                            title={&#10;                                &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;Icon icon=&quot;file-icons:fabric&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Fabric&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;forge&quot;&#10;                            title={&#10;                                &lt;&gt;&#10;                                    &lt;Icon icon=&quot;simple-icons:curseforge&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Forge&lt;/p&gt;&#10;                                &lt;/&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;quilt&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;Quilt size={32}/&gt;&#10;                                    &lt;p&gt;Quilt&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;neoforge&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;NeoForge size={32}/&gt;&#10;                                    &lt;p&gt;NeoForge&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;custom&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;Icon icon=&quot;pixelarticons:cloud-upload&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Custom&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;MinecraftVersionSelector&#10;                    onVersionChange={(version, url)=&gt;{}}&#10;                    version={minecraftVersion}&#10;                    isDisabled={isSaving || isUploadingLoader}&#10;                /&gt;&#10;&#10;                &lt;LoaderSelector&#10;                    selectedLoader={loaderType}&#10;                    version={minecraftVersion}&#10;                    isSnapshot={(minecraftVersion?.includes(&quot;snapshot&quot;) || minecraftVersion?.includes(&quot;pre-release&quot;)) ?? false}&#10;                    onChange={handleLoaderChange}&#10;                    onCustomJarChange={setCustomJarFile}&#10;                    isDisabled={isSaving || isUploadingLoader}&#10;                /&gt;&#10;&#10;                {hasLoaderChanges() &amp;&amp; (&#10;                    &lt;div className=&quot;bg-warning-50 border border-warning-200 rounded-lg p-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 text-warning-700&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:info-box&quot;/&gt;&#10;                            &lt;p className=&quot;font-minecraft-body text-sm&quot;&gt;&#10;                                Server type or version changes detected. A new server jar will be downloaded when you save.&#10;                                {loaderType !== &quot;custom&quot; &amp;&amp; loaderUrl &amp;&amp; (&#10;                                    &lt;span className=&quot;block mt-1 opacity-75&quot;&gt;&#10;                                        New jar: {generateNewJarFilename()}&#10;                                    &lt;/span&gt;&#10;                                )}&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Java Configuration */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Java Configuration&lt;/h3&gt;&#10;&#10;                &lt;JavaExecutableSelector&#10;                    defaultSelectedExecutable={javaExecutable}&#10;                    onVersionChange={(executable) =&gt; setJavaExecutable(executable || &quot;&quot;)}&#10;                    isDisabled={false}&#10;                /&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Additional Java Arguments&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;-XX:+UseG1GC -XX:+ParallelRefProcEnabled...&quot;&#10;                    value={javaArgs}&#10;                    onValueChange={setJavaArgs}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:terminal&quot;/&gt;}&#10;                    description=&quot;Additional JVM arguments (excluding -Xmx and -Xms)&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Arguments */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Arguments&lt;/h3&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Minecraft Server Arguments&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;--nogui --port 25565...&quot;&#10;                    value={minecraftArgs}&#10;                    onValueChange={setMinecraftArgs}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:command-line&quot;/&gt;}&#10;                    description=&quot;Additional arguments passed to the Minecraft server&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Memory Configuration */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Memory Configuration&lt;/h3&gt;&#10;&#10;                &lt;RamSlider&#10;                    value={maxMemory}&#10;                    onValueChange={setMaxMemory}&#10;                    isDisabled={false}&#10;                /&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Minimum Memory (GB)&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    type=&quot;number&quot;&#10;                    min={1}&#10;                    max={maxMemory}&#10;                    value={minMemory.toString()}&#10;                    onValueChange={(value) =&gt; setMinMemory(Number(value) || 1)}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:memory&quot;/&gt;}&#10;                    description=&quot;Minimum RAM allocation for the JVM&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Features */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Features&lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;Switch&#10;                        isSelected={upnpEnabled}&#10;                        onValueChange={setUpnpEnabled}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:wifi&quot;/&gt;&#10;                            &lt;span&gt;Enable UPnP Port Forwarding&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;&#10;                    &lt;Switch&#10;                        isSelected={autoStart}&#10;                        onValueChange={setAutoStart}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:power&quot;/&gt;&#10;                            &lt;span&gt;Auto-start on Boot&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;&#10;                    &lt;Switch&#10;                        isSelected={autoRestart}&#10;                        onValueChange={setAutoRestart}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:reload&quot;/&gt;&#10;                            &lt;span&gt;Auto-restart on Crash&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;type LoaderSelectorProps = {&#10;    selectedLoader: string;&#10;    version: string | undefined;&#10;    onChange: (url: string | undefined, version: string | undefined) =&gt; void;&#10;    onCustomJarChange: (file: File | undefined) =&gt; void;&#10;    isDisabled: boolean;&#10;    isSnapshot: boolean;&#10;}&#10;&#10;function LoaderSelector(props: LoaderSelectorProps)&#10;{&#10;    const {&#10;        selectedLoader,&#10;        version,&#10;        onChange,&#10;        isDisabled&#10;    } = props;&#10;&#10;    if (!version)&#10;    {&#10;        return (&#10;            &lt;p className=&quot;text-danger font-minecraft-body text-tiny italic underline&quot;&gt;&#10;                Please select a Minecraft version first.&#10;            &lt;/p&gt;&#10;        );&#10;    }&#10;&#10;    switch (selectedLoader)&#10;    {&#10;        case &quot;fabric&quot;:&#10;            return (&#10;                &lt;FabricVersionSelector&#10;                    minecraftVersion={version}&#10;                    onVersionChange={onChange}&#10;                    isDisabled={isDisabled}&#10;                    isSnapshot={props.isSnapshot}&#10;                /&gt;&#10;            );&#10;        case &quot;forge&quot;:&#10;            return (&#10;                &lt;ForgeVersionSelector&#10;                    minecraftVersion={version}&#10;                    onVersionChange={onChange}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;quilt&quot;:&#10;            return (&#10;                &lt;QuiltVersionSelector&#10;                    minecraftVersion={version}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;neoforge&quot;:&#10;            return (&#10;                &lt;NeoForgeVersionSelector&#10;                    minecraftVersion={version}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;custom&quot;:&#10;            return (&#10;                &lt;FileInput&#10;                    accept=&quot;.jar,.zip,.tar.gz,.tar&quot;&#10;                    description=&quot;Upload your custom jar file or modpack archive.&quot;&#10;                    multiple={false}&#10;                    onChange={(file) =&gt; props.onCustomJarChange(file as File | undefined)}&#10;                    readOnly={isDisabled}&#10;                /&gt;&#10;            );&#10;        default:&#10;            return null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import {Button, Divider, Input, Select, SelectItem, Switch, Tab, Tabs, Textarea} from &quot;@heroui/react&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import {useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import {LoaderType, useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import RamSlider from &quot;../../RamSlider.tsx&quot;;&#10;import JavaExecutableSelector from &quot;../../JavaExecutableSelector.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {MinecraftVersionSelector} from &quot;../../version-selectors/MinecraftVersionSelector.tsx&quot;;&#10;import {ForgeVersionSelector} from &quot;../../version-selectors/ForgeVersionSelector.tsx&quot;;&#10;import {FabricVersionSelector} from &quot;../../version-selectors/FabricVersionSelector.tsx&quot;;&#10;import {QuiltVersionSelector} from &quot;../../version-selectors/QuiltVersionSelector.tsx&quot;;&#10;import {NeoForgeVersionSelector} from &quot;../../version-selectors/NeoForgeVersionSelector.tsx&quot;;&#10;import {FileInput} from &quot;../../../extended/FileInput.tsx&quot;;&#10;import {NeoForge} from &quot;../../../icons/NeoForge.svg.tsx&quot;;&#10;import Quilt from &quot;../../../icons/Quilt.svg.tsx&quot;;&#10;import {getMinecraftVersionDownloadUrl} from &quot;../../../../ts/minecraft-versions.ts&quot;;&#10;&#10;export function ServerOptions()&#10;{&#10;    const {server, updateServer, getEntries, uploadFromUrl, uploadFile} = useServer();&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [isSaving, setIsSaving] = useState(false);&#10;&#10;    // Form state&#10;    const [name, setName] = useState(&quot;&quot;);&#10;    const [description, setDescription] = useState(&quot;&quot;);&#10;    const [javaExecutable, setJavaExecutable] = useState(&quot;&quot;);&#10;    const [javaArgs, setJavaArgs] = useState(&quot;&quot;);&#10;    const [minecraftArgs, setMinecraftArgs] = useState(&quot;&quot;);&#10;    const [maxMemory, setMaxMemory] = useState(4);&#10;    const [minMemory, setMinMemory] = useState(1);&#10;    const [serverJar, setServerJar] = useState(&quot;&quot;);&#10;    const [upnpEnabled, setUpnpEnabled] = useState(false);&#10;    const [autoStart, setAutoStart] = useState(false);&#10;    const [autoRestart, setAutoRestart] = useState(false);&#10;&#10;    // Loader configuration state&#10;    const [loaderType, setLoaderType] = useState&lt;LoaderType&gt;(&quot;vanilla&quot;);&#10;    const [minecraftVersion, setMinecraftVersion] = useState(&quot;&quot;);&#10;    const [loaderVersion, setLoaderVersion] = useState(&quot;&quot;);&#10;    const [loaderUrl, setLoaderUrl] = useState&lt;string | undefined&gt;(undefined);&#10;    const [customJarFile, setCustomJarFile] = useState&lt;File | undefined&gt;(undefined);&#10;    const [isUploadingLoader, setIsUploadingLoader] = useState(false);&#10;    const firstLoadStateRef = useRef(false);&#10;&#10;    // Available files&#10;    const [availableFiles, setAvailableFiles] = useState&lt;string[]&gt;([]);&#10;&#10;&#10;    const loadAvailableFiles = useCallback(async () =&gt;&#10;    {&#10;        if (!server) return;&#10;&#10;        setIsLoading(true);&#10;        try&#10;        {&#10;            const entries = await getEntries(&quot;&quot;);&#10;            const files = entries.entries&#10;                .filter(entry =&gt; !entry.is_dir)&#10;                .filter(entry =&gt;&#10;                {&#10;                    const name = entry.filename.toLowerCase();&#10;                    return name.endsWith(&quot;.jar&quot;) || name.endsWith(&quot;.bat&quot;) || name.endsWith(&quot;.sh&quot;);&#10;                })&#10;                .map(entry =&gt; entry.filename);&#10;&#10;            setAvailableFiles(files);&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to load server files:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsLoading(false);&#10;        }&#10;    }, [server, getEntries]);&#10;&#10;    const handleLoaderChange = useCallback((url: string | undefined, version: string | undefined) =&gt;&#10;    {&#10;        setLoaderUrl(url);&#10;        setLoaderVersion(version || &quot;&quot;);&#10;    }, []);&#10;&#10;    const generateNewJarFilename = useCallback(() =&gt;&#10;    {&#10;        if (loaderType === &quot;vanilla&quot; || loaderType === &quot;custom&quot;)&#10;        {&#10;            return `server-${minecraftVersion}.jar`;&#10;        }&#10;        return `${loaderType}-${loaderVersion}-${minecraftVersion}-server.jar`;&#10;    }, [loaderType, loaderVersion, minecraftVersion]);&#10;&#10;    const hasLoaderChanges = useCallback(() =&gt;&#10;    {&#10;        if (!server) return false;&#10;        return (&#10;            loaderType !== server.server_type ||&#10;            minecraftVersion !== server.minecraft_version ||&#10;            loaderVersion !== server.loader_version&#10;        );&#10;    }, [server, loaderType, minecraftVersion, loaderVersion]);&#10;&#10;    const handleSave = useCallback(async () =&gt;&#10;    {&#10;        if (!server) return;&#10;&#10;        setIsSaving(true);&#10;&#10;        try&#10;        {&#10;            let finalServerJar = serverJar;&#10;&#10;            // If loader configuration changed, upload a new server jar&#10;            if (hasLoaderChanges())&#10;            {&#10;                setIsUploadingLoader(true);&#10;                const newJarFilename = generateNewJarFilename();&#10;&#10;                if (loaderType !== &quot;custom&quot;)&#10;                {&#10;                    if (!loaderUrl &amp;&amp; loaderType !== &quot;vanilla&quot;)&#10;                    {&#10;                        throw new Error(`Loader URL is not defined for selected loader: ${loaderType}`);&#10;                    }&#10;&#10;                    await uploadFromUrl(&#10;                        loaderUrl ?? await getMinecraftVersionDownloadUrl(minecraftVersion),&#10;                        newJarFilename,&#10;                        (progress) =&gt; console.log(`Downloading ${loaderType} server: ${progress}%`),&#10;                        () =&gt; console.log(&quot;Download complete&quot;),&#10;                        (error) =&gt; console.error(&quot;Error uploading server jar:&quot;, error),&#10;                        server.id&#10;                    );&#10;                } else&#10;                {&#10;                    if (!customJarFile)&#10;                    {&#10;                        throw new Error(&quot;Please select a custom jar file.&quot;);&#10;                    }&#10;&#10;                    await uploadFile(&#10;                        customJarFile,&#10;                        newJarFilename,&#10;                        (bytes) =&gt; console.log(`Uploading custom jar: ${bytes} bytes`),&#10;                        () =&gt; console.log(&quot;Upload cancelled&quot;),&#10;                        server.id&#10;                    );&#10;                }&#10;&#10;                finalServerJar = newJarFilename;&#10;                setServerJar(newJarFilename);&#10;                setIsUploadingLoader(false);&#10;            }&#10;&#10;            await updateServer({&#10;                name,&#10;                description: description || null,&#10;                java_executable: javaExecutable,&#10;                java_args: javaArgs,&#10;                minecraft_args: minecraftArgs,&#10;                max_memory: maxMemory,&#10;                min_memory: minMemory,&#10;                server_jar: finalServerJar,&#10;                upnp: upnpEnabled,&#10;                auto_start: autoStart,&#10;                auto_restart: autoRestart,&#10;                // Update loader configuration&#10;                server_type: loaderType,&#10;                minecraft_version: minecraftVersion,&#10;                loader_version: loaderVersion&#10;            });&#10;&#10;            // Refresh file list after potential jar upload&#10;            if (hasLoaderChanges())&#10;            {&#10;                await loadAvailableFiles();&#10;            }&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to save server settings:&quot;, error);&#10;        } finally&#10;        {&#10;            setIsSaving(false);&#10;            setIsUploadingLoader(false);&#10;        }&#10;    }, [&#10;        server, updateServer, name, description, javaExecutable, javaArgs,&#10;        minecraftArgs, maxMemory, minMemory, serverJar, upnpEnabled,&#10;        autoStart, autoRestart, loaderType, minecraftVersion, loaderVersion, hasLoaderChanges,&#10;        generateNewJarFilename, loaderUrl, customJarFile, uploadFromUrl,&#10;        uploadFile, loadAvailableFiles&#10;    ]);&#10;&#10;    const hasChanges = useCallback(() =&gt;&#10;    {&#10;        if (!server) return false;&#10;&#10;        return (&#10;            name !== server.name ||&#10;            description !== (server.description || &quot;&quot;) ||&#10;            javaExecutable !== server.java_executable ||&#10;            javaArgs !== server.java_args ||&#10;            minecraftArgs !== server.minecraft_args ||&#10;            maxMemory !== server.max_memory ||&#10;            minMemory !== server.min_memory ||&#10;            serverJar !== server.server_jar ||&#10;            upnpEnabled !== server.upnp ||&#10;            autoStart !== server.auto_start ||&#10;            autoRestart !== server.auto_restart ||&#10;            hasLoaderChanges()&#10;        );&#10;    }, [&#10;        server, name, description, javaExecutable, javaArgs, minecraftArgs,&#10;        maxMemory, minMemory, serverJar, upnpEnabled, autoStart, autoRestart,&#10;        hasLoaderChanges&#10;    ]);&#10;    // Load server data when the component mounts or server changes&#10;    useEffect(() =&gt;&#10;    {&#10;        if (server)&#10;        {&#10;            // Only load data once when the server is first set or when server ID changes&#10;            if (!firstLoadStateRef.current)&#10;            {&#10;                firstLoadStateRef.current = true;&#10;                setName(server.name);&#10;                setDescription(server.description || &quot;&quot;);&#10;                setJavaExecutable(server.java_executable);&#10;                setJavaArgs(server.java_args);&#10;                setMinecraftArgs(server.minecraft_args);&#10;                setMaxMemory(server.max_memory);&#10;                setMinMemory(server.min_memory);&#10;                setServerJar(server.server_jar);&#10;                setUpnpEnabled(server.upnp);&#10;                setAutoStart(server.auto_start);&#10;                setAutoRestart(server.auto_restart);&#10;&#10;                // Load loader configuration&#10;                setLoaderType(server.server_type);&#10;                setMinecraftVersion(server.minecraft_version);&#10;                setLoaderVersion(server.loader_version);&#10;            }&#10;&#10;            // Always refresh a file list when server changes&#10;            loadAvailableFiles();&#10;        } else&#10;        {&#10;            // Reset the ref when no server is selected&#10;            firstLoadStateRef.current = false;&#10;        }&#10;    }, [server, loadAvailableFiles, firstLoadStateRef]);&#10;&#10;    if (!server)&#10;    {&#10;        return (&#10;            &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                &lt;p className=&quot;text-gray-500 font-minecraft-body&quot;&gt;No server selected&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;flex flex-col gap-4 p-6 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] overflow-y-auto&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-minecraft-header&quot;&gt;Server Configuration&lt;/h2&gt;&#10;                &lt;Button&#10;                    color=&quot;primary&quot;&#10;                    radius=&quot;none&quot;&#10;                    isLoading={isSaving || isUploadingLoader}&#10;                    isDisabled={!hasChanges()}&#10;                    onPress={handleSave}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:save&quot;/&gt;}&#10;                &gt;&#10;                    {isUploadingLoader ? &quot;Uploading Server...&quot; : &quot;Save Changes&quot;}&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Basic Information */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Basic Information&lt;/h3&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Server Name&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    value={name}&#10;                    onValueChange={setName}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:device-game-console&quot;/&gt;}&#10;                /&gt;&#10;&#10;                &lt;Textarea&#10;                    label=&quot;Description&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;Optional server description...&quot;&#10;                    value={description}&#10;                    onValueChange={setDescription}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:note&quot;/&gt;}&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Files */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Files&lt;/h3&gt;&#10;                    &lt;Tooltip content=&quot;Refresh file list&quot;&gt;&#10;                        &lt;Button&#10;                            isIconOnly&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;light&quot;&#10;                            radius=&quot;none&quot;&#10;                            isLoading={isLoading}&#10;                            onPress={loadAvailableFiles}&#10;                        &gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:reload&quot;/&gt;&#10;                        &lt;/Button&gt;&#10;                    &lt;/Tooltip&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;Select&#10;                    label=&quot;Server JAR File&quot;&#10;                    radius=&quot;none&quot;&#10;                    disallowEmptySelection&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    selectedKeys={serverJar ? [serverJar] : []}&#10;                    onSelectionChange={(keys) =&gt;&#10;                    {&#10;                        const selected = Array.from(keys)[0] as string;&#10;                        setServerJar(selected || &quot;&quot;);&#10;                    }}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:file&quot;/&gt;}&#10;                    placeholder=&quot;Select a server file...&quot;&#10;                    isLoading={isLoading}&#10;                    classNames={{&#10;                        base: &quot;capitalize&quot;,&#10;                        popoverContent: &quot;rounded-none border-primary border-1&quot;&#10;                    }}&#10;&#10;                    listboxProps={{&#10;                        itemClasses: {&#10;                            base: &quot;rounded-none font-minecraft-body&quot;&#10;                        }&#10;                    }}&#10;                &gt;&#10;                    {availableFiles.map((file) =&gt; (&#10;                        &lt;SelectItem key={file}&gt;&#10;                            {file}&#10;                        &lt;/SelectItem&gt;&#10;                    ))}&#10;                &lt;/Select&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Loader Configuration */}&#10;            &lt;section className=&quot;space-y-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Type &amp; Version&lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;mx-auto&quot;&gt;&#10;                    &lt;Tabs&#10;                        radius=&quot;none&quot;&#10;                        className=&quot;font-minecraft-body&quot;&#10;                        fullWidth&#10;                        variant=&quot;solid&quot;&#10;                        color=&quot;primary&quot;&#10;                        classNames={{&#10;                            tab: &quot;flex flex-col items-center justify-center h-24 w-28&quot;&#10;                        }}&#10;                        isDisabled={isSaving || isUploadingLoader}&#10;                        selectedKey={loaderType}&#10;                        onSelectionChange={(key) =&gt; setLoaderType(key as LoaderType)}&#10;                    &gt;&#10;                        &lt;Tab&#10;                            key=&quot;vanilla&quot;&#10;                            title={&#10;                                &lt;&gt;&#10;                                    &lt;Icon icon=&quot;heroicons:cube-transparent-16-solid&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Vanilla&lt;/p&gt;&#10;                                &lt;/&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;fabric&quot;&#10;                            title={&#10;                                &lt;div className=&quot;relative&quot;&gt;&#10;                                    &lt;Icon icon=&quot;file-icons:fabric&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Fabric&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;forge&quot;&#10;                            title={&#10;                                &lt;&gt;&#10;                                    &lt;Icon icon=&quot;simple-icons:curseforge&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Forge&lt;/p&gt;&#10;                                &lt;/&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;quilt&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;Quilt size={32}/&gt;&#10;                                    &lt;p&gt;Quilt&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;neoforge&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;NeoForge size={32}/&gt;&#10;                                    &lt;p&gt;NeoForge&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                        &lt;Tab&#10;                            key=&quot;custom&quot;&#10;                            title={&#10;                                &lt;div className=&quot;flex justify-center items-center flex-col gap-2&quot;&gt;&#10;                                    &lt;Icon icon=&quot;pixelarticons:cloud-upload&quot; width={32}/&gt;&#10;                                    &lt;p&gt;Custom&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            }&#10;                        /&gt;&#10;                    &lt;/Tabs&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;MinecraftVersionSelector&#10;                    onVersionChange={(version, url) =&gt; {&#10;                        setMinecraftVersion(version || &quot;&quot;);&#10;                        // Store the vanilla server URL if this is for vanilla servers&#10;                        if (loaderType === &quot;vanilla&quot; &amp;&amp; url) {&#10;                            setLoaderUrl(url);&#10;                        }&#10;                    }}&#10;                    version={minecraftVersion}&#10;                    isDisabled={isSaving || isUploadingLoader}&#10;                /&gt;&#10;&#10;                &lt;LoaderSelector&#10;                    selectedLoader={loaderType}&#10;                    version={minecraftVersion}&#10;                    isSnapshot={(minecraftVersion?.includes(&quot;snapshot&quot;) || minecraftVersion?.includes(&quot;pre-release&quot;)) ?? false}&#10;                    onChange={handleLoaderChange}&#10;                    onCustomJarChange={setCustomJarFile}&#10;                    isDisabled={isSaving || isUploadingLoader}&#10;                /&gt;&#10;&#10;                {hasLoaderChanges() &amp;&amp; (&#10;                    &lt;div className=&quot;bg-warning-50 border border-warning-200 rounded-lg p-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 text-warning-700&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:info-box&quot;/&gt;&#10;                            &lt;p className=&quot;font-minecraft-body text-sm&quot;&gt;&#10;                                Server type or version changes detected. A new server jar will be downloaded when you save.&#10;                                {loaderType !== &quot;custom&quot; &amp;&amp; loaderUrl &amp;&amp; (&#10;                                    &lt;span className=&quot;block mt-1 opacity-75&quot;&gt;&#10;                                        New jar: {generateNewJarFilename()}&#10;                                    &lt;/span&gt;&#10;                                )}&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Java Configuration */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Java Configuration&lt;/h3&gt;&#10;&#10;                &lt;JavaExecutableSelector&#10;                    defaultSelectedExecutable={javaExecutable}&#10;                    onVersionChange={(executable) =&gt; setJavaExecutable(executable || &quot;&quot;)}&#10;                    isDisabled={false}&#10;                /&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Additional Java Arguments&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;-XX:+UseG1GC -XX:+ParallelRefProcEnabled...&quot;&#10;                    value={javaArgs}&#10;                    onValueChange={setJavaArgs}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:terminal&quot;/&gt;}&#10;                    description=&quot;Additional JVM arguments (excluding -Xmx and -Xms)&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Arguments */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Arguments&lt;/h3&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Minecraft Server Arguments&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    placeholder=&quot;--nogui --port 25565...&quot;&#10;                    value={minecraftArgs}&#10;                    onValueChange={setMinecraftArgs}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:command-line&quot;/&gt;}&#10;                    description=&quot;Additional arguments passed to the Minecraft server&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Memory Configuration */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Memory Configuration&lt;/h3&gt;&#10;&#10;                &lt;RamSlider&#10;                    value={maxMemory}&#10;                    onValueChange={setMaxMemory}&#10;                    isDisabled={false}&#10;                /&gt;&#10;&#10;                &lt;Input&#10;                    label=&quot;Minimum Memory (GB)&quot;&#10;                    radius=&quot;none&quot;&#10;                    className=&quot;font-minecraft-body&quot;&#10;                    type=&quot;number&quot;&#10;                    min={1}&#10;                    max={maxMemory}&#10;                    value={minMemory.toString()}&#10;                    onValueChange={(value) =&gt; setMinMemory(Number(value) || 1)}&#10;                    startContent={&lt;Icon icon=&quot;pixelarticons:memory&quot;/&gt;}&#10;                    description=&quot;Minimum RAM allocation for the JVM&quot;&#10;                /&gt;&#10;            &lt;/section&gt;&#10;&#10;&#10;            &lt;Divider/&gt;&#10;&#10;            {/* Server Features */}&#10;            &lt;section className=&quot;flex flex-col gap-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-minecraft-header&quot;&gt;Server Features&lt;/h3&gt;&#10;&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;Switch&#10;                        isSelected={upnpEnabled}&#10;                        onValueChange={setUpnpEnabled}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:wifi&quot;/&gt;&#10;                            &lt;span&gt;Enable UPnP Port Forwarding&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;&#10;                    &lt;Switch&#10;                        isSelected={autoStart}&#10;                        onValueChange={setAutoStart}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:power&quot;/&gt;&#10;                            &lt;span&gt;Auto-start on Boot&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;&#10;                    &lt;Switch&#10;                        isSelected={autoRestart}&#10;                        onValueChange={setAutoRestart}&#10;                        classNames={{&#10;                            label: &quot;font-minecraft-body&quot;&#10;                        }}&#10;                    &gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Icon icon=&quot;pixelarticons:reload&quot;/&gt;&#10;                            &lt;span&gt;Auto-restart on Crash&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/Switch&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;type LoaderSelectorProps = {&#10;    selectedLoader: string;&#10;    version: string | undefined;&#10;    onChange: (url: string | undefined, version: string | undefined) =&gt; void;&#10;    onCustomJarChange: (file: File | undefined) =&gt; void;&#10;    isDisabled: boolean;&#10;    isSnapshot: boolean;&#10;}&#10;&#10;function LoaderSelector(props: LoaderSelectorProps)&#10;{&#10;    const {&#10;        selectedLoader,&#10;        version,&#10;        onChange,&#10;        isDisabled&#10;    } = props;&#10;&#10;    if (!version)&#10;    {&#10;        return (&#10;            &lt;p className=&quot;text-danger font-minecraft-body text-tiny italic underline&quot;&gt;&#10;                Please select a Minecraft version first.&#10;            &lt;/p&gt;&#10;        );&#10;    }&#10;&#10;    switch (selectedLoader)&#10;    {&#10;        case &quot;fabric&quot;:&#10;            return (&#10;                &lt;FabricVersionSelector&#10;                    minecraftVersion={version}&#10;                    onVersionChange={onChange}&#10;                    isDisabled={isDisabled}&#10;                    isSnapshot={props.isSnapshot}&#10;                /&gt;&#10;            );&#10;        case &quot;forge&quot;:&#10;            return (&#10;                &lt;ForgeVersionSelector&#10;                    minecraftVersion={version}&#10;                    onVersionChange={onChange}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;quilt&quot;:&#10;            return (&#10;                &lt;QuiltVersionSelector&#10;                    minecraftVersion={version}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;neoforge&quot;:&#10;            return (&#10;                &lt;NeoForgeVersionSelector&#10;                    minecraftVersion={version}&#10;                    isDisabled={isDisabled}&#10;                /&gt;&#10;            );&#10;        case &quot;custom&quot;:&#10;            return (&#10;                &lt;FileInput&#10;                    accept=&quot;.jar,.zip,.tar.gz,.tar&quot;&#10;                    description=&quot;Upload your custom jar file or modpack archive.&quot;&#10;                    multiple={false}&#10;                    onChange={(file) =&gt; props.onCustomJarChange(file as File | undefined)}&#10;                    readOnly={isDisabled}&#10;                /&gt;&#10;            );&#10;        default:&#10;            return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>