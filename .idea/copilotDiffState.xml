<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Archive&#10;  type: http&#10;  seq: 15&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/archive/cancel/:tracker-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  tracker-id: archive123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Upload&#10;  type: http&#10;  seq: 6&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/cancel/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Copy Files&#10;  type: http&#10;  seq: 7&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/copy&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Create New Entry&#10;  type: http&#10;  seq: 11&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/new&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;path&quot;: &quot;new-folder&quot;,&#10;    &quot;is_directory&quot;: true&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Delete Files&#10;  type: http&#10;  seq: 10&#10;}&#10;&#10;delete {&#10;  url: {{baseurl}}/server/:server-id/fs/&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;paths&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;, &quot;file2.txt&quot;]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id:&#10;}" />
              <option name="updatedContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?filepath&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath:&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?path=&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  path: &#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Move Files&#10;  type: http&#10;  seq: 8&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/move&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Rename File&#10;  type: http&#10;  seq: 9&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/rename&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;source&quot;: &quot;oldfile.txt&quot;,&#10;    &quot;destination&quot;: &quot;newfile.txt&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Search Files&#10;  type: http&#10;  seq: 12&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/search?q=config&amp;filename_only=false&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  q: config&#10;  filename_only: false&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru" />
              <option name="originalContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?filepath=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath: example.txt&#10;&#10;params:path {&#10;  server-id: &#10;  server-id:&#10;&#10;body:text {&#10;  This is the content of the uploaded file.&#10;}&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?upload_id=upload123&amp;path=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  upload_id: upload123&#10;  path: example.txt&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:text {&#10;  This is the content of the uploaded file.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Upload Progress&#10;  type: http&#10;  seq: 5&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/progress/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/ServerFiles.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/ServerFiles.tsx" />
              <option name="originalContent" value="import {Button, ButtonGroup, Chip, cn, Input, Progress, Skeleton, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from &quot;@heroui/react&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import {KeyboardEvent, useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import {FilesystemData, FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import &quot;../../../../ts/math-ext.ts&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {ContextMenuOptions, RowContextMenu} from &quot;./RowContextMenu.tsx&quot;;&#10;import {useMessage} from &quot;../../../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../../../MessageModal.tsx&quot;;&#10;import {FileTableBreadcrumbs} from &quot;./FileTableBreadcrumbs.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {ErrorBoundary} from &quot;../../../ErrorBoundry.tsx&quot;;&#10;import {FileEntryIcon} from &quot;./FileEntryIcon.tsx&quot;;&#10;import {Editor} from &quot;@monaco-editor/react&quot;;&#10;import {getMonacoLanguage, isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {registerMinecraftPropertiesLanguage} from &quot;../../../../ts/minecraft-properties-language.ts&quot;;&#10;import {motion} from &quot;framer-motion&quot;;&#10;&#10;// Define the theme outside of the component&#10;const defineObsidianTheme = (monaco: any) =&gt;&#10;{&#10;    monaco.editor.defineTheme(&quot;obsidian-editor-theme&quot;, {&#10;        base: &quot;vs-dark&quot;,&#10;        inherit: true,&#10;        rules: [&#10;            {token: &quot;key&quot;, foreground: &quot;#46da84&quot;},&#10;            {token: &quot;value&quot;, foreground: &quot;#CE9178&quot;},&#10;            {token: &quot;comment&quot;, foreground: &quot;#393f49&quot;, fontStyle: &quot;italic&quot;},&#10;            {token: &quot;operator&quot;, foreground: &quot;#D4D4D4&quot;}&#10;        ],&#10;        colors: {&#10;            &quot;editor.background&quot;: &quot;#18181b&quot;&#10;        }&#10;    });&#10;};&#10;&#10;type UploadProgress = {&#10;    entry: FilesystemEntry;&#10;    progress: number;&#10;    files: string[]&#10;    isUploading: boolean;&#10;    uploadGroup?: string;&#10;}&#10;&#10;&#10;export function ServerFiles()&#10;{&#10;    const {getEntries, renameEntry, createEntry, deleteEntry, uploadFile, archiveFiles, getFileContents} = useServer();&#10;    const {open} = useMessage();&#10;    const [path, setPath] = useState(&quot;&quot;);&#10;    const [data, setData] = useState&lt;FilesystemData&gt;();&#10;    const [selectedEntries, setSelectedEntries] = useState&lt;FilesystemEntry[]&gt;([]);&#10;    const [contextMenuOptions, setContextMenuOptions] = useState&lt;ContextMenuOptions&gt;({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [renamingEntry, setRenamingEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newItemCreationEntry, setNewItemCreationEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newArchiveEntry, setNewArchiveEntry] = useState&lt;UploadProgress | undefined&gt;(undefined);&#10;    const [fileUploadEntries, setFileUploadEntries] = useState&lt;UploadProgress[]&gt;([]);&#10;    const [isDraggingOver, setIsDraggingOver] = useState(false);&#10;    const [isEditingFile, setIsEditingFile] = useState(false);&#10;    const [selectedFileContents, setSelectedFileContents] = useState(&quot;&quot;);&#10;    const [isResizing, setIsResizing] = useState(false);&#10;    const [resizeStartX, setResizeStartX] = useState(0);&#10;    const editorRef = useRef&lt;any&gt;(null);&#10;    const monacoRef = useRef&lt;any&gt;(null);&#10;    const editorWrapperRef = useRef&lt;HTMLDivElement&gt;(null);&#10;    const editorWidth = useRef(300); // Default width for the editor&#10;&#10;&#10;    const scrollToTop = useCallback(() =&gt;&#10;    {&#10;        $(&quot;#server-files-table&quot;).parent().scrollTop(0);&#10;    }, [path]);&#10;&#10;    const upload = useCallback(async (files: File[]) =&gt;&#10;    {&#10;        let uploadGroup = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);&#10;        let promises = [];&#10;        for (let file of files)&#10;        {&#10;            let entry = {filename: file.name, path, is_dir: false, size: file.size, file_type: file.type} as FilesystemEntry;&#10;            setFileUploadEntries(prev =&gt; [...prev, {entry, progress: 0, files: [file.name], isUploading: true, uploadGroup}]);&#10;            let totalSize = file.size;&#10;            const {promise} = await uploadFile(file, entry.path, async bytes =&gt;&#10;                {&#10;                    let progress = bytes / totalSize;&#10;                    setFileUploadEntries(prev =&gt; prev.map(upload =&gt; upload.entry === entry ? {...upload, progress} : upload));&#10;                    console.log(&quot;Upload progress:&quot;, progress);&#10;                }, async () =&gt;&#10;                {&#10;                    // On Canceled&#10;                    setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.entry !== entry));&#10;                    await refresh();&#10;                }&#10;            );&#10;            promises.push(promise);&#10;        }&#10;        await Promise.all(promises);&#10;        await refresh();&#10;        setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.uploadGroup !== uploadGroup));&#10;    }, [setFileUploadEntries, fileUploadEntries, path]);&#10;&#10;&#10;    const refresh = useCallback(async () =&gt;&#10;    {&#10;        scrollToTop();&#10;        setIsLoading(true);&#10;        const data = await getEntries(path);&#10;        data.entries = data.entries.sort((a, b) =&gt;&#10;        {&#10;            if (a.is_dir &amp;&amp; !b.is_dir) return -1; // Directories first&#10;            if (!a.is_dir &amp;&amp; b.is_dir) return 1; // Files after directories&#10;            return a.filename.localeCompare(b.filename); // Sort alphabetically&#10;        });&#10;        setData(data);&#10;        setIsLoading(false);&#10;        setSelectedEntries([]);&#10;        setContextMenuOptions({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    }, [path, data]);&#10;&#10;    const renameSelectedEntry = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!renamingEntry || newName.trim() === &quot;&quot; || newName === renamingEntry.filename)&#10;        {&#10;            setRenamingEntry(undefined);&#10;            return;&#10;        }&#10;&#10;        let newPath = `${path}/${newName}`;&#10;        try&#10;        {&#10;            await renameEntry(renamingEntry.path, newPath);&#10;            setRenamingEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Rename Failed&quot;,&#10;                body: &quot;An error occurred while renaming the entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [renamingEntry, path]);&#10;&#10;    const startEntryCreation = useCallback(async (directory: boolean) =&gt;&#10;    {&#10;        scrollToTop();&#10;        let filename = `New ${directory ? &quot;Directory&quot; : &quot;File.txt&quot;}`;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === filename))&#10;        {&#10;            index++;&#10;            filename = `New ${directory ? &quot;Directory&quot; : &quot;File&quot;} (${index}).txt`;&#10;        }&#10;        let entry = {filename, path, is_dir: directory, size: 0, file_type: directory ? &quot;Directory&quot; : &quot;File&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewItemCreationEntry(entry);&#10;    }, [data, path]);&#10;&#10;    const completeEntryCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!newItemCreationEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            await createEntry(newName, path, newItemCreationEntry.is_dir);&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Creation Failed&quot;,&#10;                body: &quot;An error occurred while create new entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path]);&#10;&#10;    const startArchiveCreation = useCallback(async () =&gt;&#10;    {&#10;        setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        scrollToTop();&#10;        let filename = &quot;New Archive&quot;;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === `${filename}.zip`))&#10;        {&#10;            index++;&#10;            filename = `New Archive (${index})`;&#10;        }&#10;        let entry = {filename, path, is_dir: false, size: 0, file_type: &quot;Archive&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewArchiveEntry({entry, progress: 0, files: selectedEntries.map(entry =&gt; entry.path), isUploading: false});&#10;    }, [path, data, selectedEntries]);&#10;    const completeArchiveCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        setNewArchiveEntry(prev =&gt; prev ? {...prev, isUploading: true} : undefined);&#10;        if (!newArchiveEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewArchiveEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            archiveFiles(`${newName}.zip`, newArchiveEntry.files, path, progress =&gt;&#10;            {&#10;                setNewArchiveEntry(prev =&gt; prev ? {...prev, progress} : undefined);&#10;                console.log(&quot;Archive progress:&quot;, progress);&#10;            }, async () =&gt;&#10;            {&#10;                setNewArchiveEntry(undefined);&#10;                await refresh();&#10;            }, error =&gt;&#10;            {&#10;                open({&#10;                    title: &quot;Archive Creation Failed&quot;,&#10;                    body: `An error occurred while creating the archive: ${error}`,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;                console.error(&quot;Failed to create archive:&quot;, error);&#10;            });&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to create archive:&quot;, error);&#10;            await open({&#10;                title: &quot;Archive Creation Failed&quot;,&#10;                body: &quot;An error occurred while creating the archive. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path, newArchiveEntry]);&#10;&#10;    const handleKeyDown = useCallback(async (e: KeyboardEvent&lt;HTMLTableElement&gt;) =&gt;&#10;    {&#10;&#10;        if (renamingEntry !== undefined)&#10;        {&#10;            e.preventDefault();&#10;            return;&#10;        }&#10;&#10;        if (e.key === &quot;Escape&quot;)&#10;        {&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        }&#10;        if (e.key === &quot;F2&quot;)&#10;        {&#10;            // Start renaming the first selected entry&#10;            if (selectedEntries.length &gt; 0)&#10;            {&#10;                e.preventDefault();&#10;                setRenamingEntry(selectedEntries[0]);&#10;                return;&#10;            }&#10;        }&#10;        if (e.key === &quot;Delete&quot; || e.key === &quot;Backspace&quot;)&#10;        {&#10;            await deleteSelected(selectedEntries);&#10;        }&#10;    }, [renamingEntry, refresh, renameSelectedEntry, selectedEntries]);&#10;&#10;    const deleteSelected = useCallback(async (entries: FilesystemEntry[]) =&gt;&#10;    {&#10;        // Handle delete action for selected entries&#10;        if (entries.length &gt; 0)&#10;        {&#10;            let response = await open({&#10;                title: &quot;Delete Files&quot;,&#10;                body: `Are you sure you want to delete ${entries.length &gt; 1 ? `${entries.length} files` : entries[0].filename}? This action cannot be undone.`,&#10;                responseType: MessageResponseType.OkayCancel,&#10;                severity: &quot;danger&quot;&#10;            });&#10;            if (response)&#10;            {&#10;                // Implement delete logic here&#10;                await deleteEntry(entries.map(entry =&gt; entry.path));&#10;                await refresh();&#10;            }&#10;        }&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        refresh().then();&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        $(document).on(&quot;click&quot;, e =&gt;&#10;        {&#10;            // Close context menu when clicking outside&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        }).on(&quot;blur&quot;, e =&gt;&#10;        {&#10;            // Close context menu when focus is lost&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        });&#10;        $(&quot;#server-files-table&quot;).parent().on(&quot;scroll&quot;, () =&gt;&#10;        {&#10;            // Close context menu when scrolling&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        });&#10;        return () =&gt;&#10;        {&#10;            $(document).off(&quot;click&quot;);&#10;            $(document).off(&quot;blur&quot;);&#10;            $(&quot;#server-files-table&quot;).parent().off(&quot;scroll&quot;);&#10;        };&#10;    }, []);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path) &amp;&amp; isEditingFile)&#10;        {&#10;            setSelectedFileContents(&quot;&quot;);&#10;&#10;            // Load file contents for single text file selection&#10;            getFileContents(selectedEntries[0].path).then(contents =&gt;&#10;            {&#10;                setSelectedFileContents(contents);&#10;                setIsEditingFile(true);&#10;            }).catch(error =&gt;&#10;            {&#10;                console.error(&quot;Failed to load file contents:&quot;, error);&#10;                open({&#10;                    title: &quot;Load File Failed&quot;,&#10;                    body: &quot;An error occurred while loading the file contents. Please try again.&quot;,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;            });&#10;        } else&#10;        {&#10;            // Reset file contents when selection changes or multiple files are selected&#10;            setSelectedFileContents(&quot;&quot;);&#10;            // setIsEditingFile(false);&#10;        }&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    const handleEditorMount = useCallback((editor: any, monaco: any) =&gt;&#10;    {&#10;        editorRef.current = editor;&#10;        monacoRef.current = monaco;&#10;&#10;        // Define theme first&#10;        defineObsidianTheme(monaco);&#10;&#10;        // Register the Minecraft properties language&#10;        registerMinecraftPropertiesLanguage(monaco);&#10;&#10;        // Set the theme after it's defined&#10;        monaco.editor.setTheme(&quot;obsidian-editor-theme&quot;);&#10;&#10;        // Override the toggle line comment keybinding&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KeyC,&#10;            () =&gt;&#10;            {&#10;                editor.trigger(&quot;keyboard&quot;, &quot;editor.action.commentLine&quot;, {});&#10;            }&#10;        );&#10;&#10;        // Optional: Disable the original Ctrl+/ keybinding&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyCode.Slash,&#10;            () =&gt;&#10;            {&#10;                // Do nothing to disable the original keybinding&#10;            }&#10;        );&#10;&#10;        // Add custom command for formatting SQL&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KeyF,&#10;            () =&gt;&#10;            {&#10;                editor.trigger(&quot;keyboard&quot;, &quot;editor.action.formatDocument&quot;, {});&#10;            }&#10;        );&#10;&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    return (&#10;        &lt;div className={&#10;            cn(&#10;                &quot;flex flex-row gap-2 bg-default-50&quot;&#10;            )&#10;        }&gt;&#10;            &lt;div&#10;                id={&quot;server-file-browser&quot;}&#10;                className={&#10;                    cn(&#10;                        &quot;flex flex-col gap-2 p-4 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] relative grow min-w-[400px]&quot;&#10;                    )&#10;                }&#10;                onDragStart={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnd={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnter={() =&gt; setIsDraggingOver(true)}&#10;                onDragExit={() =&gt; setIsDraggingOver(false)}&#10;                onDragOver={e =&gt; e.preventDefault()}&#10;                onDrop={async e =&gt;&#10;                {&#10;                    e.preventDefault();&#10;                    console.log(&quot;Files dropped:&quot;, e.dataTransfer.files);&#10;                    setIsDraggingOver(false);&#10;                    await upload([...e.dataTransfer.files]);&#10;                }}&#10;                data-dragging-over={isDraggingOver}&#10;            &gt;&#10;                {isDraggingOver &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 z-30 border-dotted border-4 border-primary bg-background/90 flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;font-minecraft-body text-4xl&quot;&gt;Drop Files to Upload&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;                {isEditingFile &amp;&amp; selectedEntries.length === 1 ? (&#10;                    &lt;div&#10;                        className={&quot;absolute right-0 top-0 bottom-0 w-[2px] bg-white/10 hover:cursor-ew-resize data-[resizing=true]:w-[8px]&quot;}&#10;                        onMouseDown={e =&gt;&#10;                        {&#10;                            e.preventDefault();&#10;                            setIsResizing(true);&#10;                            setResizeStartX(e.clientX);&#10;                            $(document).on(&quot;mousemove&quot;, e =&gt;&#10;                            {&#10;                                if (editorWrapperRef.current)&#10;                                {&#10;                                    const editor = $(editorWrapperRef.current);&#10;                                    const width = editor.width();&#10;                                    if (!width) return;&#10;                                    const deltaX = e.clientX - resizeStartX;&#10;                                    const newWidth = Math.max(300, width - deltaX);&#10;                                    editor.css(&quot;width&quot;, `${newWidth}px`);&#10;                                    editorWidth.current = newWidth; // Update the width reference&#10;                                    setResizeStartX(e.clientX); // Update start position for next move&#10;                                }&#10;                            });&#10;                            $(document).on(&quot;mouseup&quot;, () =&gt;&#10;                            {&#10;                                setIsResizing(false);&#10;                                $(document).off(&quot;mousemove&quot;);&#10;                                $(document).off(&quot;mouseup&quot;);&#10;                            });&#10;&#10;                        }}&#10;                        data-resizing={isResizing}&#10;                    /&gt;&#10;                ) : null}&#10;&#10;                &lt;div className={&quot;flex flex-row justify-between items-center&quot;}&gt;&#10;                    &lt;FileTableBreadcrumbs onNavigate={setPath} paths={path.split(&quot;/&quot;).filter(p =&gt; p.trim() !== &quot;&quot;)}/&gt;&#10;                    &lt;ButtonGroup radius={&quot;none&quot;} variant={&quot;flat&quot;}&gt;&#10;                        &lt;Tooltip content={&quot;New File&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(false)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:file-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;New Directory&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(true)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:folder-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Toggle File Editor&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; setIsEditingFile(prev =&gt; !prev)} color={isEditingFile ? &quot;primary&quot; : &quot;default&quot;}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:notes&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Refresh Files&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} isDisabled={isLoading} onPress={refresh}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:repeat&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;                &lt;ErrorBoundary&gt;&#10;                    &lt;Table&#10;                        id={&quot;server-files-table&quot;}&#10;                        removeWrapper&#10;                        radius={&quot;none&quot;}&#10;                        className={cn(&quot;font-minecraft-body overflow-y-auto&quot;)}&#10;                        fullWidth&#10;                        color={&quot;primary&quot;}&#10;                        aria-label={&quot;Server Files&quot;}&#10;                        selectionMode={&quot;multiple&quot;}&#10;                        selectionBehavior={&quot;replace&quot;}&#10;                        showSelectionCheckboxes={false}&#10;                        isHeaderSticky&#10;                        classNames={{&#10;                            tr: &quot;!rounded-none&quot;,&#10;                            th: &quot;backdrop-blur-md bg-default-50/50 !rounded-none&quot;&#10;                        }}&#10;                        selectedKeys={selectedEntries.map(entry =&gt; entry.filename)}&#10;                        onSelectionChange={keys =&gt;&#10;                        {&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                            const selected = [...keys].map(key =&gt; data?.entries.find(entry =&gt; entry.filename === key)).filter(Boolean) as FilesystemEntry[];&#10;                            setSelectedEntries(selected);&#10;                        }}&#10;                        isKeyboardNavigationDisabled={true}&#10;                        onKeyDown={handleKeyDown}&#10;                    &gt;&#10;                        &lt;TableHeader&gt;&#10;                            &lt;TableColumn&gt;Name&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Type&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Size&lt;/TableColumn&gt;&#10;                            &lt;TableColumn width={48} hideHeader hidden={isEditingFile}&gt;Action&lt;/TableColumn&gt;&#10;                        &lt;/TableHeader&gt;&#10;                        &lt;TableBody&gt;&#10;                            {isLoading ? Array.from({length: 5}, (_, i) =&gt; (&#10;                                &lt;TableRow key={`skeleton-${i}`}&gt;&#10;                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-8&quot;}/&gt;&#10;                                        &lt;Skeleton className={&quot;w-32 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-24 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-16 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                &lt;/TableRow&gt;&#10;                            )) : (&#10;                                &lt;&gt;&#10;                                    {data?.entries?.length === 0 &amp;&amp; fileUploadEntries.length === 0 ? (&#10;                                        &lt;TableRow&gt;&#10;                                            &lt;TableCell colSpan={4} className=&quot;text-center text-gray-500&quot;&gt;&#10;                                                This directory is empty&#10;                                            &lt;/TableCell&gt;&#10;                                        &lt;/TableRow&gt;&#10;                                    ) : (&#10;                                        &lt;&gt;&#10;                                            {fileUploadEntries.map(upload =&gt; (&#10;                                                &lt;TableRow key={`upload-${upload.entry.filename}`}&gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        &lt;FileEntryIcon entry={upload.entry}/&gt; {upload.entry.filename}&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;{upload.entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;&#10;                                                        &lt;Progress&#10;                                                            minValue={0}&#10;                                                            maxValue={1}&#10;                                                            value={upload.progress}&#10;                                                            size={&quot;sm&quot;}&#10;                                                        /&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell&gt;&#10;                                                        &lt;&gt;&lt;/&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            ))}&#10;                                            {data?.entries.map(entry =&gt;&#10;&#10;                                                &lt;TableRow&#10;                                                    key={entry.filename}&#10;                                                    onContextMenu={e =&gt;&#10;                                                    {&#10;                                                        e.preventDefault();&#10;                                                        setContextMenuOptions({&#10;                                                            entry: selectedEntries.length &gt; 1 ? selectedEntries : entry,&#10;                                                            x: e.clientX - 30,&#10;                                                            y: e.clientY - 50,&#10;                                                            isOpen: true&#10;                                                        });&#10;                                                    }}&#10;                                                    data-selected={contextMenuOptions.entry === entry &amp;&amp; contextMenuOptions.isOpen}&#10;                                                    className={&quot;data-[selected=true]:opacity-50 data-[selected=true]:bg-white/10&quot;}&#10;                                                    onDoubleClick={() =&gt;&#10;                                                    {&#10;                                                        if (entry.is_dir &amp;&amp; !renamingEntry &amp;&amp; !newItemCreationEntry)&#10;                                                        {&#10;                                                            setPath(prev =&gt; prev ? `${prev}/${entry.filename}` : entry.filename);&#10;                                                        }&#10;                                                    }}&#10;                                                &gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        {renamingEntry === entry ?&#10;                                                            &lt;Input&#10;                                                                startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                defaultValue={entry.filename}&#10;                                                                autoFocus&#10;                                                                onBlur={e =&gt; renameSelectedEntry(e.currentTarget.value)}&#10;                                                                onKeyDown={async e =&gt;&#10;                                                                {&#10;                                                                    if (e.key === &quot;Enter&quot;) await renameSelectedEntry(e.currentTarget.value);&#10;                                                                }}&#10;                                                                radius={&quot;none&quot;}&#10;                                                                className={&quot;font-minecraft-body&quot;}&#10;                                                            /&gt; :&#10;                                                            newItemCreationEntry === entry ?&#10;                                                                &lt;Input&#10;                                                                    startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                    defaultValue={entry.filename}&#10;                                                                    autoFocus&#10;                                                                    onBlur={e =&gt; completeEntryCreation(e.currentTarget.value)}&#10;                                                                    onKeyDown={async e =&gt;&#10;                                                                    {&#10;                                                                        if (e.key === &quot;Enter&quot;) await completeEntryCreation(e.currentTarget.value);&#10;                                                                    }}&#10;                                                                    radius={&quot;none&quot;}&#10;                                                                    className={&quot;font-minecraft-body&quot;}&#10;                                                                /&gt;&#10;                                                                : (newArchiveEntry?.entry === entry &amp;&amp; !newArchiveEntry.isUploading) ?&#10;                                                                    &lt;Input&#10;                                                                        startContent={&lt;FileEntryIcon entry={{filename: &quot;.zip&quot;} as FilesystemEntry}/&gt;}&#10;                                                                        defaultValue={entry.filename}&#10;                                                                        autoFocus&#10;                                                                        onBlur={e =&gt; completeArchiveCreation(e.currentTarget.value)}&#10;                                                                        onKeyDown={async e =&gt;&#10;                                                                        {&#10;                                                                            if (e.key === &quot;Enter&quot;) await completeArchiveCreation(e.currentTarget.value);&#10;                                                                        }}&#10;                                                                        radius={&quot;none&quot;}&#10;                                                                        className={&quot;font-minecraft-body&quot;}&#10;                                                                        endContent={&lt;Chip&gt;.zip&lt;/Chip&gt;}&#10;                                                                    /&gt;&#10;                                                                    :&#10;                                                                    &lt;&gt;&lt;FileEntryIcon entry={entry}/&gt; {entry.filename}&lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;{entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        {entry === newArchiveEntry?.entry ?&#10;                                                            &lt;&gt;&#10;                                                                &lt;Progress&#10;                                                                    minValue={0}&#10;                                                                    maxValue={100}&#10;                                                                    value={newArchiveEntry.progress}&#10;                                                                    size={&quot;sm&quot;}&#10;                                                                /&gt;&#10;                                                            &lt;/&gt;&#10;                                                            :&#10;                                                            &lt;&gt;&#10;                                                                {entry.is_dir ? &quot;-&quot; : Math.convertToByteString(entry.size)}&#10;                                                            &lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        &lt;Button&#10;                                                            isIconOnly&#10;                                                            radius={&quot;none&quot;}&#10;                                                            variant={&quot;light&quot;}&#10;                                                            onPress={e =&gt;&#10;                                                            {&#10;                                                                let position = $(e.target).offset();&#10;                                                                if (!position) return;&#10;                                                                setContextMenuOptions({&#10;                                                                    entry,&#10;                                                                    x: position.left - 264,&#10;                                                                    y: position.top,&#10;                                                                    isOpen: true&#10;                                                                });&#10;                                                            }}&#10;                                                        &gt;&#10;                                                            &lt;Icon icon={&quot;pixelarticons:more-horizontal&quot;}/&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            )}&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            )}&#10;                        &lt;/TableBody&gt;&#10;                    &lt;/Table&gt;&#10;                &lt;/ErrorBoundary&gt;&#10;                {(!isEditingFile || selectedEntries.length !== 1) ? (&#10;                    &lt;RowContextMenu&#10;                        {...contextMenuOptions}&#10;                        onRename={setRenamingEntry}&#10;                        onDelete={deleteSelected}&#10;                        onArchive={startArchiveCreation}&#10;                        onEdit={() =&gt;&#10;                        {&#10;                            setIsEditingFile(true);&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                        }}&#10;                        onClose={() =&gt; setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}))}&#10;                    /&gt;&#10;                ) : null}&#10;            &lt;/div&gt;&#10;            &lt;motion.div&#10;                id={&quot;server-file-editor&quot;}&#10;                ref={editorWrapperRef}&#10;                className={&quot;max-h-[calc(100dvh_-_400px)] w-full h-screen min-h-[300px]&quot;}&#10;                initial={{opacity: 0, width: 0}}&#10;                animate={{opacity: isEditingFile &amp;&amp; selectedEntries.length === 1 ? 1 : 0, width: isEditingFile &amp;&amp; selectedEntries.length === 1 ? `${editorWidth.current}px` : &quot;0&quot;}}&#10;                exit={{opacity: 0, width: 0}}&#10;                transition={{duration: 0.3, ease: &quot;easeInOut&quot;}}&#10;                data-editing-file={isEditingFile &amp;&amp; selectedEntries.length === 1}&#10;            &gt;&#10;                {selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path) ? (&#10;&#10;                    &lt;Editor&#10;                        className={&quot;w-full h-full&quot;}&#10;                        theme={&quot;obsidian-editor-theme&quot;}&#10;                        value={isEditingFile ? selectedFileContents : &quot;&quot;}&#10;                        language={getMonacoLanguage(selectedEntries[0]?.path ?? &quot;&quot;) ?? &quot;auto&quot;}&#10;                        onMount={handleEditorMount}&#10;                        options={{&#10;                            fontSize: 14,&#10;                            minimap: {enabled: false},&#10;                            lineNumbers: &quot;on&quot;,&#10;                            scrollBeyondLastLine: false,&#10;                            automaticLayout: true,&#10;                            wordWrap: &quot;on&quot;,&#10;                            tabSize: 2,&#10;                            contextmenu: false,&#10;                            autoClosingBrackets: &quot;always&quot;,&#10;                            autoClosingOvertype: &quot;always&quot;,&#10;                            autoClosingQuotes: &quot;always&quot;,&#10;                            // Enhanced autocompletion options&#10;                            quickSuggestions: {&#10;                                other: true,&#10;                                comments: false,&#10;                                strings: true&#10;                            },&#10;                            suggestOnTriggerCharacters: true,&#10;                            acceptSuggestionOnEnter: &quot;on&quot;,&#10;                            tabCompletion: &quot;on&quot;,&#10;                            wordBasedSuggestions: &quot;matchingDocuments&quot;,&#10;                            // Enhanced validation and hints&#10;                            parameterHints: {&#10;                                enabled: true,&#10;                                cycle: true&#10;                            },&#10;                            // Format on paste and type&#10;                            formatOnPaste: true,&#10;                            formatOnType: true,&#10;                            // Bracket matching&#10;                            matchBrackets: &quot;always&quot;,&#10;                            // Auto indentation&#10;                            autoIndent: &quot;full&quot;,&#10;                            // Folding&#10;                            folding: true,&#10;                            foldingStrategy: &quot;indentation&quot;,&#10;                            // Suggestions&#10;                            suggest: {&#10;                                showKeywords: true,&#10;                                showSnippets: true,&#10;                                showFunctions: true,&#10;                                showConstructors: true,&#10;                                showFields: true,&#10;                                showVariables: true,&#10;                                showClasses: true,&#10;                                showStructs: true,&#10;                                showInterfaces: true,&#10;                                showModules: true,&#10;                                showProperties: true,&#10;                                showEvents: true,&#10;                                showOperators: true,&#10;                                showUnits: true,&#10;                                showValues: true,&#10;                                showConstants: true,&#10;                                showEnums: true,&#10;                                showEnumMembers: true,&#10;                                showColors: true,&#10;                                showFiles: true,&#10;                                showReferences: true,&#10;                                showFolders: true,&#10;                                showTypeParameters: true,&#10;                                showUsers: true,&#10;                                showIssues: true&#10;                            }&#10;                        }}&#10;                    /&gt;&#10;                ) : selectedEntries.length === 1 &amp;&amp; !isTextFile(selectedEntries[0].path) ? (&#10;                    &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-500 font-minecraft-body&quot;&gt;Select a text file to edit&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                ) : null}&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import {Button, ButtonGroup, Chip, cn, Input, Progress, Skeleton, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from &quot;@heroui/react&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import {KeyboardEvent, useCallback, useEffect, useRef, useState} from &quot;react&quot;;&#10;import {FilesystemData, FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import &quot;../../../../ts/math-ext.ts&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {ContextMenuOptions, RowContextMenu} from &quot;./RowContextMenu.tsx&quot;;&#10;import {useMessage} from &quot;../../../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../../../MessageModal.tsx&quot;;&#10;import {FileTableBreadcrumbs} from &quot;./FileTableBreadcrumbs.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {ErrorBoundary} from &quot;../../../ErrorBoundry.tsx&quot;;&#10;import {FileEntryIcon} from &quot;./FileEntryIcon.tsx&quot;;&#10;import {Editor} from &quot;@monaco-editor/react&quot;;&#10;import {getMonacoLanguage, isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {registerMinecraftPropertiesLanguage} from &quot;../../../../ts/minecraft-properties-language.ts&quot;;&#10;import {motion, AnimatePresence} from &quot;framer-motion&quot;;&#10;&#10;// Define the theme outside of the component&#10;const defineObsidianTheme = (monaco: any) =&gt;&#10;{&#10;    monaco.editor.defineTheme(&quot;obsidian-editor-theme&quot;, {&#10;        base: &quot;vs-dark&quot;,&#10;        inherit: true,&#10;        rules: [&#10;            {token: &quot;key&quot;, foreground: &quot;#46da84&quot;},&#10;            {token: &quot;value&quot;, foreground: &quot;#CE9178&quot;},&#10;            {token: &quot;comment&quot;, foreground: &quot;#393f49&quot;, fontStyle: &quot;italic&quot;},&#10;            {token: &quot;operator&quot;, foreground: &quot;#D4D4D4&quot;}&#10;        ],&#10;        colors: {&#10;            &quot;editor.background&quot;: &quot;#18181b&quot;&#10;        }&#10;    });&#10;};&#10;&#10;type UploadProgress = {&#10;    entry: FilesystemEntry;&#10;    progress: number;&#10;    files: string[]&#10;    isUploading: boolean;&#10;    uploadGroup?: string;&#10;}&#10;&#10;&#10;export function ServerFiles()&#10;{&#10;    const {getEntries, renameEntry, createEntry, deleteEntry, uploadFile, archiveFiles, getFileContents} = useServer();&#10;    const {open} = useMessage();&#10;    const [path, setPath] = useState(&quot;&quot;);&#10;    const [data, setData] = useState&lt;FilesystemData&gt;();&#10;    const [selectedEntries, setSelectedEntries] = useState&lt;FilesystemEntry[]&gt;([]);&#10;    const [contextMenuOptions, setContextMenuOptions] = useState&lt;ContextMenuOptions&gt;({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [renamingEntry, setRenamingEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newItemCreationEntry, setNewItemCreationEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newArchiveEntry, setNewArchiveEntry] = useState&lt;UploadProgress | undefined&gt;(undefined);&#10;    const [fileUploadEntries, setFileUploadEntries] = useState&lt;UploadProgress[]&gt;([]);&#10;    const [isDraggingOver, setIsDraggingOver] = useState(false);&#10;    const [isEditingFile, setIsEditingFile] = useState(false);&#10;    const [selectedFileContents, setSelectedFileContents] = useState(&quot;&quot;);&#10;    const [isDragging, setIsDragging] = useState(false);&#10;    const [editorWidth, setEditorWidth] = useState(() =&gt; {&#10;        // Load saved width from localStorage or use default&#10;        const savedWidth = localStorage.getItem(&quot;editor-width&quot;);&#10;        return savedWidth ? parseInt(savedWidth, 10) : 400;&#10;    });&#10;    const editorRef = useRef&lt;any&gt;(null);&#10;    const monacoRef = useRef&lt;any&gt;(null);&#10;    const editorWrapperRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;&#10;    const scrollToTop = useCallback(() =&gt;&#10;    {&#10;        $(&quot;#server-files-table&quot;).parent().scrollTop(0);&#10;    }, [path]);&#10;&#10;    const upload = useCallback(async (files: File[]) =&gt;&#10;    {&#10;        let uploadGroup = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);&#10;        let promises = [];&#10;        for (let file of files)&#10;        {&#10;            let entry = {filename: file.name, path, is_dir: false, size: file.size, file_type: file.type} as FilesystemEntry;&#10;            setFileUploadEntries(prev =&gt; [...prev, {entry, progress: 0, files: [file.name], isUploading: true, uploadGroup}]);&#10;            let totalSize = file.size;&#10;            const {promise} = await uploadFile(file, entry.path, async bytes =&gt;&#10;                {&#10;                    let progress = bytes / totalSize;&#10;                    setFileUploadEntries(prev =&gt; prev.map(upload =&gt; upload.entry === entry ? {...upload, progress} : upload));&#10;                    console.log(&quot;Upload progress:&quot;, progress);&#10;                }, async () =&gt;&#10;                {&#10;                    // On Canceled&#10;                    setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.entry !== entry));&#10;                    await refresh();&#10;                }&#10;            );&#10;            promises.push(promise);&#10;        }&#10;        await Promise.all(promises);&#10;        await refresh();&#10;        setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.uploadGroup !== uploadGroup));&#10;    }, [setFileUploadEntries, fileUploadEntries, path]);&#10;&#10;&#10;    const refresh = useCallback(async () =&gt;&#10;    {&#10;        scrollToTop();&#10;        setIsLoading(true);&#10;        const data = await getEntries(path);&#10;        data.entries = data.entries.sort((a, b) =&gt;&#10;        {&#10;            if (a.is_dir &amp;&amp; !b.is_dir) return -1; // Directories first&#10;            if (!a.is_dir &amp;&amp; b.is_dir) return 1; // Files after directories&#10;            return a.filename.localeCompare(b.filename); // Sort alphabetically&#10;        });&#10;        setData(data);&#10;        setIsLoading(false);&#10;        setSelectedEntries([]);&#10;        setContextMenuOptions({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    }, [path, data]);&#10;&#10;    const renameSelectedEntry = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!renamingEntry || newName.trim() === &quot;&quot; || newName === renamingEntry.filename)&#10;        {&#10;            setRenamingEntry(undefined);&#10;            return;&#10;        }&#10;&#10;        let newPath = `${path}/${newName}`;&#10;        try&#10;        {&#10;            await renameEntry(renamingEntry.path, newPath);&#10;            setRenamingEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Rename Failed&quot;,&#10;                body: &quot;An error occurred while renaming the entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [renamingEntry, path]);&#10;&#10;    const startEntryCreation = useCallback(async (directory: boolean) =&gt;&#10;    {&#10;        scrollToTop();&#10;        let filename = `New ${directory ? &quot;Directory&quot; : &quot;File.txt&quot;}`;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === filename))&#10;        {&#10;            index++;&#10;            filename = `New ${directory ? &quot;Directory&quot; : &quot;File&quot;} (${index}).txt`;&#10;        }&#10;        let entry = {filename, path, is_dir: directory, size: 0, file_type: directory ? &quot;Directory&quot; : &quot;File&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewItemCreationEntry(entry);&#10;    }, [data, path]);&#10;&#10;    const completeEntryCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!newItemCreationEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            await createEntry(newName, path, newItemCreationEntry.is_dir);&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Creation Failed&quot;,&#10;                body: &quot;An error occurred while create new entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path]);&#10;&#10;    const startArchiveCreation = useCallback(async () =&gt;&#10;    {&#10;        setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        scrollToTop();&#10;        let filename = &quot;New Archive&quot;;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === `${filename}.zip`))&#10;        {&#10;            index++;&#10;            filename = `New Archive (${index})`;&#10;        }&#10;        let entry = {filename, path, is_dir: false, size: 0, file_type: &quot;Archive&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewArchiveEntry({entry, progress: 0, files: selectedEntries.map(entry =&gt; entry.path), isUploading: false});&#10;    }, [path, data, selectedEntries]);&#10;    const completeArchiveCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        setNewArchiveEntry(prev =&gt; prev ? {...prev, isUploading: true} : undefined);&#10;        if (!newArchiveEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewArchiveEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            archiveFiles(`${newName}.zip`, newArchiveEntry.files, path, progress =&gt;&#10;            {&#10;                setNewArchiveEntry(prev =&gt; prev ? {...prev, progress} : undefined);&#10;                console.log(&quot;Archive progress:&quot;, progress);&#10;            }, async () =&gt;&#10;            {&#10;                setNewArchiveEntry(undefined);&#10;                await refresh();&#10;            }, error =&gt;&#10;            {&#10;                open({&#10;                    title: &quot;Archive Creation Failed&quot;,&#10;                    body: `An error occurred while creating the archive: ${error}`,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;                console.error(&quot;Failed to create archive:&quot;, error);&#10;            });&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to create archive:&quot;, error);&#10;            await open({&#10;                title: &quot;Archive Creation Failed&quot;,&#10;                body: &quot;An error occurred while creating the archive. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path, newArchiveEntry]);&#10;&#10;    const handleKeyDown = useCallback(async (e: KeyboardEvent&lt;HTMLTableElement&gt;) =&gt;&#10;    {&#10;&#10;        if (renamingEntry !== undefined)&#10;        {&#10;            e.preventDefault();&#10;            return;&#10;        }&#10;&#10;        if (e.key === &quot;Escape&quot;)&#10;        {&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        }&#10;        if (e.key === &quot;F2&quot;)&#10;        {&#10;            // Start renaming the first selected entry&#10;            if (selectedEntries.length &gt; 0)&#10;            {&#10;                e.preventDefault();&#10;                setRenamingEntry(selectedEntries[0]);&#10;                return;&#10;            }&#10;        }&#10;        if (e.key === &quot;Delete&quot; || e.key === &quot;Backspace&quot;)&#10;        {&#10;            await deleteSelected(selectedEntries);&#10;        }&#10;    }, [renamingEntry, refresh, renameSelectedEntry, selectedEntries]);&#10;&#10;    const deleteSelected = useCallback(async (entries: FilesystemEntry[]) =&gt;&#10;    {&#10;        // Handle delete action for selected entries&#10;        if (entries.length &gt; 0)&#10;        {&#10;            let response = await open({&#10;                title: &quot;Delete Files&quot;,&#10;                body: `Are you sure you want to delete ${entries.length &gt; 1 ? `${entries.length} files` : entries[0].filename}? This action cannot be undone.`,&#10;                responseType: MessageResponseType.OkayCancel,&#10;                severity: &quot;danger&quot;&#10;            });&#10;            if (response)&#10;            {&#10;                // Implement delete logic here&#10;                await deleteEntry(entries.map(entry =&gt; entry.path));&#10;                await refresh();&#10;            }&#10;        }&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        refresh().then();&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        $(document).on(&quot;click&quot;, e =&gt;&#10;        {&#10;            // Close context menu when clicking outside&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        }).on(&quot;blur&quot;, e =&gt;&#10;        {&#10;            // Close context menu when focus is lost&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        });&#10;        $(&quot;#server-files-table&quot;).parent().on(&quot;scroll&quot;, () =&gt;&#10;        {&#10;            // Close context menu when scrolling&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        });&#10;        return () =&gt;&#10;        {&#10;            $(document).off(&quot;click&quot;);&#10;            $(document).off(&quot;blur&quot;);&#10;            $(&quot;#server-files-table&quot;).parent().off(&quot;scroll&quot;);&#10;        };&#10;    }, []);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path) &amp;&amp; isEditingFile)&#10;        {&#10;            setSelectedFileContents(&quot;&quot;);&#10;&#10;            // Load file contents for single text file selection&#10;            getFileContents(selectedEntries[0].path).then(contents =&gt;&#10;            {&#10;                setSelectedFileContents(contents);&#10;                setIsEditingFile(true);&#10;            }).catch(error =&gt;&#10;            {&#10;                console.error(&quot;Failed to load file contents:&quot;, error);&#10;                open({&#10;                    title: &quot;Load File Failed&quot;,&#10;                    body: &quot;An error occurred while loading the file contents. Please try again.&quot;,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;            });&#10;        } else&#10;        {&#10;            // Reset file contents when selection changes or multiple files are selected&#10;            setSelectedFileContents(&quot;&quot;);&#10;            // setIsEditingFile(false);&#10;        }&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    const handleEditorMount = useCallback((editor: any, monaco: any) =&gt;&#10;    {&#10;        editorRef.current = editor;&#10;        monacoRef.current = monaco;&#10;&#10;        // Define theme first&#10;        defineObsidianTheme(monaco);&#10;&#10;        // Register the Minecraft properties language&#10;        registerMinecraftPropertiesLanguage(monaco);&#10;&#10;        // Set the theme after it's defined&#10;        monaco.editor.setTheme(&quot;obsidian-editor-theme&quot;);&#10;&#10;        // Override the toggle line comment keybinding&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KeyC,&#10;            () =&gt;&#10;            {&#10;                editor.trigger(&quot;keyboard&quot;, &quot;editor.action.commentLine&quot;, {});&#10;            }&#10;        );&#10;&#10;        // Optional: Disable the original Ctrl+/ keybinding&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyCode.Slash,&#10;            () =&gt;&#10;            {&#10;                // Do nothing to disable the original keybinding&#10;            }&#10;        );&#10;&#10;        // Add custom command for formatting SQL&#10;        editor.addCommand(&#10;            monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KeyF,&#10;            () =&gt;&#10;            {&#10;                editor.trigger(&quot;keyboard&quot;, &quot;editor.action.formatDocument&quot;, {});&#10;            }&#10;        );&#10;&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    return (&#10;        &lt;div className={&#10;            cn(&#10;                &quot;flex flex-row gap-2 bg-default-50&quot;&#10;            )&#10;        }&gt;&#10;            &lt;div&#10;                id={&quot;server-file-browser&quot;}&#10;                className={&#10;                    cn(&#10;                        &quot;flex flex-col gap-2 p-4 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] relative grow min-w-[400px]&quot;&#10;                    )&#10;                }&#10;                onDragStart={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnd={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnter={() =&gt; setIsDraggingOver(true)}&#10;                onDragExit={() =&gt; setIsDraggingOver(false)}&#10;                onDragOver={e =&gt; e.preventDefault()}&#10;                onDrop={async e =&gt;&#10;                {&#10;                    e.preventDefault();&#10;                    console.log(&quot;Files dropped:&quot;, e.dataTransfer.files);&#10;                    setIsDraggingOver(false);&#10;                    await upload([...e.dataTransfer.files]);&#10;                }}&#10;                data-dragging-over={isDraggingOver}&#10;            &gt;&#10;                {isDraggingOver &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 z-30 border-dotted border-4 border-primary bg-background/90 flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;font-minecraft-body text-4xl&quot;&gt;Drop Files to Upload&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className={&quot;flex flex-row justify-between items-center&quot;}&gt;&#10;                    &lt;FileTableBreadcrumbs onNavigate={setPath} paths={path.split(&quot;/&quot;).filter(p =&gt; p.trim() !== &quot;&quot;)}/&gt;&#10;                    &lt;ButtonGroup radius={&quot;none&quot;} variant={&quot;flat&quot;}&gt;&#10;                        &lt;Tooltip content={&quot;New File&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(false)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:file-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;New Directory&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(true)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:folder-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Toggle File Editor&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; setIsEditingFile(prev =&gt; !prev)} color={isEditingFile ? &quot;primary&quot; : &quot;default&quot;}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:notes&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Refresh Files&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} isDisabled={isLoading} onPress={refresh}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:repeat&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;                &lt;ErrorBoundary&gt;&#10;                    &lt;Table&#10;                        id={&quot;server-files-table&quot;}&#10;                        removeWrapper&#10;                        radius={&quot;none&quot;}&#10;                        className={cn(&quot;font-minecraft-body overflow-y-auto&quot;)}&#10;                        fullWidth&#10;                        color={&quot;primary&quot;}&#10;                        aria-label={&quot;Server Files&quot;}&#10;                        selectionMode={&quot;multiple&quot;}&#10;                        selectionBehavior={&quot;replace&quot;}&#10;                        showSelectionCheckboxes={false}&#10;                        isHeaderSticky&#10;                        classNames={{&#10;                            tr: &quot;!rounded-none&quot;,&#10;                            th: &quot;backdrop-blur-md bg-default-50/50 !rounded-none&quot;&#10;                        }}&#10;                        selectedKeys={selectedEntries.map(entry =&gt; entry.filename)}&#10;                        onSelectionChange={keys =&gt;&#10;                        {&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                            const selected = [...keys].map(key =&gt; data?.entries.find(entry =&gt; entry.filename === key)).filter(Boolean) as FilesystemEntry[];&#10;                            setSelectedEntries(selected);&#10;                        }}&#10;                        isKeyboardNavigationDisabled={true}&#10;                        onKeyDown={handleKeyDown}&#10;                    &gt;&#10;                        &lt;TableHeader&gt;&#10;                            &lt;TableColumn&gt;Name&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Type&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Size&lt;/TableColumn&gt;&#10;                            &lt;TableColumn width={48} hideHeader hidden={isEditingFile}&gt;Action&lt;/TableColumn&gt;&#10;                        &lt;/TableHeader&gt;&#10;                        &lt;TableBody&gt;&#10;                            {isLoading ? Array.from({length: 5}, (_, i) =&gt; (&#10;                                &lt;TableRow key={`skeleton-${i}`}&gt;&#10;                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-8&quot;}/&gt;&#10;                                        &lt;Skeleton className={&quot;w-32 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-24 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-16 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                &lt;/TableRow&gt;&#10;                            )) : (&#10;                                &lt;&gt;&#10;                                    {data?.entries?.length === 0 &amp;&amp; fileUploadEntries.length === 0 ? (&#10;                                        &lt;TableRow&gt;&#10;                                            &lt;TableCell colSpan={4} className=&quot;text-center text-gray-500&quot;&gt;&#10;                                                This directory is empty&#10;                                            &lt;/TableCell&gt;&#10;                                        &lt;/TableRow&gt;&#10;                                    ) : (&#10;                                        &lt;&gt;&#10;                                            {fileUploadEntries.map(upload =&gt; (&#10;                                                &lt;TableRow key={`upload-${upload.entry.filename}`}&gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        &lt;FileEntryIcon entry={upload.entry}/&gt; {upload.entry.filename}&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;{upload.entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;&#10;                                                        &lt;Progress&#10;                                                            minValue={0}&#10;                                                            maxValue={1}&#10;                                                            value={upload.progress}&#10;                                                            size={&quot;sm&quot;}&#10;                                                        /&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell&gt;&#10;                                                        &lt;&gt;&lt;/&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            ))}&#10;                                            {data?.entries.map(entry =&gt;&#10;&#10;                                                &lt;TableRow&#10;                                                    key={entry.filename}&#10;                                                    onContextMenu={e =&gt;&#10;                                                    {&#10;                                                        e.preventDefault();&#10;                                                        setContextMenuOptions({&#10;                                                            entry: selectedEntries.length &gt; 1 ? selectedEntries : entry,&#10;                                                            x: e.clientX - 30,&#10;                                                            y: e.clientY - 50,&#10;                                                            isOpen: true&#10;                                                        });&#10;                                                    }}&#10;                                                    data-selected={contextMenuOptions.entry === entry &amp;&amp; contextMenuOptions.isOpen}&#10;                                                    className={&quot;data-[selected=true]:opacity-50 data-[selected=true]:bg-white/10&quot;}&#10;                                                    onDoubleClick={() =&gt;&#10;                                                    {&#10;                                                        if (entry.is_dir &amp;&amp; !renamingEntry &amp;&amp; !newItemCreationEntry)&#10;                                                        {&#10;                                                            setPath(prev =&gt; prev ? `${prev}/${entry.filename}` : entry.filename);&#10;                                                        }&#10;                                                    }}&#10;                                                &gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        {renamingEntry === entry ?&#10;                                                            &lt;Input&#10;                                                                startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                defaultValue={entry.filename}&#10;                                                                autoFocus&#10;                                                                onBlur={e =&gt; renameSelectedEntry(e.currentTarget.value)}&#10;                                                                onKeyDown={async e =&gt;&#10;                                                                {&#10;                                                                    if (e.key === &quot;Enter&quot;) await renameSelectedEntry(e.currentTarget.value);&#10;                                                                }}&#10;                                                                radius={&quot;none&quot;}&#10;                                                                className={&quot;font-minecraft-body&quot;}&#10;                                                            /&gt; :&#10;                                                            newItemCreationEntry === entry ?&#10;                                                                &lt;Input&#10;                                                                    startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                    defaultValue={entry.filename}&#10;                                                                    autoFocus&#10;                                                                    onBlur={e =&gt; completeEntryCreation(e.currentTarget.value)}&#10;                                                                    onKeyDown={async e =&gt;&#10;                                                                    {&#10;                                                                        if (e.key === &quot;Enter&quot;) await completeEntryCreation(e.currentTarget.value);&#10;                                                                    }}&#10;                                                                    radius={&quot;none&quot;}&#10;                                                                    className={&quot;font-minecraft-body&quot;}&#10;                                                                /&gt;&#10;                                                                : (newArchiveEntry?.entry === entry &amp;&amp; !newArchiveEntry.isUploading) ?&#10;                                                                    &lt;Input&#10;                                                                        startContent={&lt;FileEntryIcon entry={{filename: &quot;.zip&quot;} as FilesystemEntry}/&gt;}&#10;                                                                        defaultValue={entry.filename}&#10;                                                                        autoFocus&#10;                                                                        onBlur={e =&gt; completeArchiveCreation(e.currentTarget.value)}&#10;                                                                        onKeyDown={async e =&gt;&#10;                                                                        {&#10;                                                                            if (e.key === &quot;Enter&quot;) await completeArchiveCreation(e.currentTarget.value);&#10;                                                                        }}&#10;                                                                        radius={&quot;none&quot;}&#10;                                                                        className={&quot;font-minecraft-body&quot;}&#10;                                                                        endContent={&lt;Chip&gt;.zip&lt;/Chip&gt;}&#10;                                                                    /&gt;&#10;                                                                    :&#10;                                                                    &lt;&gt;&lt;FileEntryIcon entry={entry}/&gt; {entry.filename}&lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;{entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        {entry === newArchiveEntry?.entry ?&#10;                                                            &lt;&gt;&#10;                                                                &lt;Progress&#10;                                                                    minValue={0}&#10;                                                                    maxValue={100}&#10;                                                                    value={newArchiveEntry.progress}&#10;                                                                    size={&quot;sm&quot;}&#10;                                                                /&gt;&#10;                                                            &lt;/&gt;&#10;                                                            :&#10;                                                            &lt;&gt;&#10;                                                                {entry.is_dir ? &quot;-&quot; : Math.convertToByteString(entry.size)}&#10;                                                            &lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        &lt;Button&#10;                                                            isIconOnly&#10;                                                            radius={&quot;none&quot;}&#10;                                                            variant={&quot;light&quot;}&#10;                                                            onPress={e =&gt;&#10;                                                            {&#10;                                                                let position = $(e.target).offset();&#10;                                                                if (!position) return;&#10;                                                                setContextMenuOptions({&#10;                                                                    entry,&#10;                                                                    x: position.left - 264,&#10;                                                                    y: position.top,&#10;                                                                    isOpen: true&#10;                                                                });&#10;                                                            }}&#10;                                                        &gt;&#10;                                                            &lt;Icon icon={&quot;pixelarticons:more-horizontal&quot;}/&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            )}&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            )}&#10;                        &lt;/TableBody&gt;&#10;                    &lt;/Table&gt;&#10;                &lt;/ErrorBoundary&gt;&#10;                {(!isEditingFile || selectedEntries.length !== 1) ? (&#10;                    &lt;RowContextMenu&#10;                        {...contextMenuOptions}&#10;                        onRename={setRenamingEntry}&#10;                        onDelete={deleteSelected}&#10;                        onArchive={startArchiveCreation}&#10;                        onEdit={() =&gt;&#10;                        {&#10;                            setIsEditingFile(true);&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                        }}&#10;                        onClose={() =&gt; setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}))}&#10;                    /&gt;&#10;                ) : null}&#10;            &lt;/div&gt;&#10;            &lt;motion.div&#10;                id={&quot;server-file-editor&quot;}&#10;                ref={editorWrapperRef}&#10;                className={&quot;max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] relative&quot;}&#10;                initial={{opacity: 0, width: 0}}&#10;                animate={{&#10;                    opacity: isEditingFile &amp;&amp; selectedEntries.length === 1 ? 1 : 0, &#10;                    width: isEditingFile &amp;&amp; selectedEntries.length === 1 ? `${editorWidth}px` : &quot;0&quot;&#10;                }}&#10;                exit={{opacity: 0, width: 0}}&#10;                transition={{duration: 0.3, ease: &quot;easeInOut&quot;}}&#10;                data-editing-file={isEditingFile &amp;&amp; selectedEntries.length === 1}&#10;            &gt;&#10;                {selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path) ? (&#10;                    &lt;Editor&#10;                        className={&quot;w-full h-full&quot;}&#10;                        theme={&quot;obsidian-editor-theme&quot;}&#10;                        value={isEditingFile ? selectedFileContents : &quot;&quot;}&#10;                        language={getMonacoLanguage(selectedEntries[0]?.path ?? &quot;&quot;) ?? &quot;auto&quot;}&#10;                        onMount={handleEditorMount}&#10;                        width={`${editorWidth}px`}&#10;                        options={{&#10;                            fontSize: 14,&#10;                            minimap: {enabled: false},&#10;                            lineNumbers: &quot;on&quot;,&#10;                            scrollBeyondLastLine: false,&#10;                            automaticLayout: true,&#10;                            wordWrap: &quot;on&quot;,&#10;                            tabSize: 2,&#10;                            contextmenu: false,&#10;                            autoClosingBrackets: &quot;always&quot;,&#10;                            autoClosingOvertype: &quot;always&quot;,&#10;                            autoClosingQuotes: &quot;always&quot;,&#10;                            quickSuggestions: {&#10;                                other: true,&#10;                                comments: false,&#10;                                strings: true&#10;                            },&#10;                            suggestOnTriggerCharacters: true,&#10;                            acceptSuggestionOnEnter: &quot;on&quot;,&#10;                            tabCompletion: &quot;on&quot;,&#10;                            wordBasedSuggestions: &quot;matchingDocuments&quot;,&#10;                            parameterHints: {&#10;                                enabled: true,&#10;                                cycle: true&#10;                            },&#10;                            formatOnPaste: true,&#10;                            formatOnType: true,&#10;                            matchBrackets: &quot;always&quot;,&#10;                            autoIndent: &quot;full&quot;,&#10;                            folding: true,&#10;                            foldingStrategy: &quot;indentation&quot;,&#10;                            suggest: {&#10;                                showKeywords: true,&#10;                                showSnippets: true,&#10;                                showFunctions: true,&#10;                                showConstructors: true,&#10;                                showFields: true,&#10;                                showVariables: true,&#10;                                showClasses: true,&#10;                                showStructs: true,&#10;                                showInterfaces: true,&#10;                                showModules: true,&#10;                                showProperties: true,&#10;                                showEvents: true,&#10;                                showOperators: true,&#10;                                showUnits: true,&#10;                                showValues: true,&#10;                                showConstants: true,&#10;                                showEnums: true,&#10;                                showEnumMembers: true,&#10;                                showColors: true,&#10;                                showFiles: true,&#10;                                showReferences: true,&#10;                                showFolders: true,&#10;                                showTypeParameters: true,&#10;                                showUsers: true,&#10;                                showIssues: true&#10;                            }&#10;                        }}&#10;                    /&gt;&#10;                ) : selectedEntries.length === 1 &amp;&amp; !isTextFile(selectedEntries[0].path) ? (&#10;                    &lt;div className=&quot;flex items-center justify-center h-full&quot;&gt;&#10;                        &lt;span className=&quot;text-gray-500 font-minecraft-body&quot;&gt;Select a text file to edit&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                ) : null}&#10;&#10;                {/* Resize Handle */}&#10;                {isEditingFile &amp;&amp; selectedEntries.length === 1 &amp;&amp; (&#10;                    &lt;div&#10;                        className={&#10;                            cn(&#10;                                &quot;w-px h-full bg-white opacity-20 transition-all duration-200 absolute left-0 top-0 cursor-ew-resize select-none&quot;,&#10;                                &quot;hover:opacity-50 hover:w-1 hover:bg-primary&quot;,&#10;                                &quot;data-[dragging=true]:opacity-50 data-[dragging=true]:bg-primary&quot;&#10;                            )&#10;                        }&#10;                        data-dragging={isDragging}&#10;                        onMouseDown={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            setIsDragging(true);&#10;&#10;                            const startX = e.clientX;&#10;                            const startWidth = editorWidth;&#10;&#10;                            const onMouseMove = (moveEvent: MouseEvent) =&gt; {&#10;                                moveEvent.preventDefault();&#10;                                const newWidth = startWidth - (moveEvent.clientX - startX);&#10;                                setEditorWidth(Math.min(800, Math.max(300, newWidth)));&#10;                            };&#10;&#10;                            const onMouseUp = (mouseEvent: MouseEvent) =&gt; {&#10;                                mouseEvent.preventDefault();&#10;                                setIsDragging(false);&#10;&#10;                                const newWidth = Math.max(300, startWidth - (mouseEvent.clientX - startX));&#10;                                localStorage.setItem(&quot;editor-width&quot;, newWidth.toString());&#10;                                document.removeEventListener(&quot;mousemove&quot;, onMouseMove);&#10;                                document.removeEventListener(&quot;mouseup&quot;, onMouseUp);&#10;                            };&#10;&#10;                            document.addEventListener(&quot;mousemove&quot;, onMouseMove);&#10;                            document.addEventListener(&quot;mouseup&quot;, onMouseUp);&#10;                        }}&#10;                    /&gt;&#10;                )}&#10;            &lt;/motion.div&gt;&#10;&#10;            {/* Overlay to prevent clicks during dragging */}&#10;            &lt;AnimatePresence&gt;&#10;                {isDragging &amp;&amp; (&#10;                    &lt;motion.div &#10;                        className=&quot;fixed inset-0 z-50 cursor-ew-resize select-none pointer-events-auto bg-primary/10&quot; &#10;                        initial={{opacity: 0}} &#10;                        animate={{opacity: 1}} &#10;                        exit={{opacity: 0}} &#10;                        transition={{duration: 0.2}} &#10;                        onClick={(e) =&gt; e.stopPropagation()}&#10;                    /&gt;&#10;                )}&#10;            &lt;/AnimatePresence&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>