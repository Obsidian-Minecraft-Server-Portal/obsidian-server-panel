<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Archive.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Archive&#10;  type: http&#10;  seq: 15&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/archive/cancel/:tracker-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  tracker-id: archive123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Cancel Upload.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Cancel Upload&#10;  type: http&#10;  seq: 6&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/cancel/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Copy Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Copy Files&#10;  type: http&#10;  seq: 7&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/copy&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Create New Entry.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Create New Entry&#10;  type: http&#10;  seq: 11&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/new&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;path&quot;: &quot;new-folder&quot;,&#10;    &quot;is_directory&quot;: true&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Delete Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Delete Files&#10;  type: http&#10;  seq: 10&#10;}&#10;&#10;delete {&#10;  url: {{baseurl}}/server/:server-id/fs/&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;paths&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;, &quot;file2.txt&quot;]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Download Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id: &#10;}" />
              <option name="updatedContent" value="meta {&#10;  name: Download Files&#10;  type: http&#10;  seq: 4&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/download?items=logs&amp;items=config&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  items: logs&#10;  items: config&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Get Files.bru" />
              <option name="originalContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?filepath&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath: &#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Get Files&#10;  type: http&#10;  seq: 1&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/files?path=&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  path: &#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Move Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Move Files&#10;  type: http&#10;  seq: 8&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/move&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;entries&quot;: [&quot;file1.txt&quot;, &quot;folder1&quot;],&#10;    &quot;path&quot;: &quot;destination/folder&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Rename File.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Rename File&#10;  type: http&#10;  seq: 9&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/rename&#10;  body: json&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:json {&#10;  {&#10;    &quot;source&quot;: &quot;oldfile.txt&quot;,&#10;    &quot;destination&quot;: &quot;newfile.txt&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Search Files.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Search Files&#10;  type: http&#10;  seq: 12&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/search?q=config&amp;filename_only=false&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  q: config&#10;  filename_only: false&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload File.bru" />
              <option name="originalContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?filepath=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  filepath: example.txt&#10;}&#10;&#10;params:path {&#10;  server-id: &#10;}&#10;&#10;body:text {&#10;  This is the content of the uploaded file.&#10;}&#10;" />
              <option name="updatedContent" value="meta {&#10;  name: Upload File&#10;  type: http&#10;  seq: 2&#10;}&#10;&#10;post {&#10;  url: {{baseurl}}/server/:server-id/fs/upload?upload_id=upload123&amp;path=example.txt&#10;  body: text&#10;  auth: inherit&#10;}&#10;&#10;params:query {&#10;  upload_id: upload123&#10;  path: example.txt&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;}&#10;&#10;body:text {&#10;  This is the content of the uploaded file.&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.bruno/Filesystem Operations/Upload Progress.bru" />
              <option name="updatedContent" value="meta {&#10;  name: Upload Progress&#10;  type: http&#10;  seq: 5&#10;}&#10;&#10;get {&#10;  url: {{baseurl}}/server/:server-id/fs/upload/progress/:upload-id&#10;  body: none&#10;  auth: inherit&#10;}&#10;&#10;params:path {&#10;  server-id: lW97O03zR32QygKY&#10;  upload-id: upload123&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/ServerFiles.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/components/server-components/server-page/files/ServerFiles.tsx" />
              <option name="originalContent" value="import {Button, ButtonGroup, Chip, cn, Input, Progress, Skeleton, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from &quot;@heroui/react&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import {KeyboardEvent, useCallback, useEffect, useState} from &quot;react&quot;;&#10;import {FilesystemData, FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import &quot;../../../../ts/math-ext.ts&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {ContextMenuOptions, RowContextMenu} from &quot;./RowContextMenu.tsx&quot;;&#10;import {useMessage} from &quot;../../../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../../../MessageModal.tsx&quot;;&#10;import {FileTableBreadcrumbs} from &quot;./FileTableBreadcrumbs.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {ErrorBoundary} from &quot;../../../ErrorBoundry.tsx&quot;;&#10;import {FileEntryIcon} from &quot;./FileEntryIcon.tsx&quot;;&#10;import {Editor} from &quot;@monaco-editor/react&quot;;&#10;import {getMonacoLanguage, isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {motion} from &quot;framer-motion&quot;;&#10;&#10;type UploadProgress = {&#10;    entry: FilesystemEntry;&#10;    progress: number;&#10;    files: string[]&#10;    isUploading: boolean;&#10;    uploadGroup?: string;&#10;}&#10;&#10;&#10;export function ServerFiles()&#10;{&#10;    const {getEntries, renameEntry, createEntry, deleteEntry, uploadFile, archiveFiles, getFileContents, setFileContents} = useServer();&#10;    const {open} = useMessage();&#10;    const [path, setPath] = useState(&quot;&quot;);&#10;    const [data, setData] = useState&lt;FilesystemData&gt;();&#10;    const [selectedEntries, setSelectedEntries] = useState&lt;FilesystemEntry[]&gt;([]);&#10;    const [contextMenuOptions, setContextMenuOptions] = useState&lt;ContextMenuOptions&gt;({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [renamingEntry, setRenamingEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newItemCreationEntry, setNewItemCreationEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newArchiveEntry, setNewArchiveEntry] = useState&lt;UploadProgress | undefined&gt;(undefined);&#10;    const [fileUploadEntries, setFileUploadEntries] = useState&lt;UploadProgress[]&gt;([]);&#10;    const [isDraggingOver, setIsDraggingOver] = useState(false);&#10;    const [isEditingFile, setIsEditingFile] = useState(true);&#10;    const [selectedFileContents, setSelectedFileContents] = useState(&quot;&quot;);&#10;&#10;    const scrollToTop = useCallback(() =&gt;&#10;    {&#10;        $(&quot;#server-files-table&quot;).parent().scrollTop(0);&#10;    }, [path]);&#10;&#10;    const upload = useCallback(async (files: File[]) =&gt;&#10;    {&#10;        let uploadGroup = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);&#10;        let promises = [];&#10;        for (let file of files)&#10;        {&#10;            let entry = {filename: file.name, path, is_dir: false, size: file.size, file_type: file.type} as FilesystemEntry;&#10;            setFileUploadEntries(prev =&gt; [...prev, {entry, progress: 0, files: [file.name], isUploading: true, uploadGroup}]);&#10;            let totalSize = file.size;&#10;            const {promise} = await uploadFile(file, entry.path, async bytes =&gt;&#10;                {&#10;                    let progress = bytes / totalSize;&#10;                    setFileUploadEntries(prev =&gt; prev.map(upload =&gt; upload.entry === entry ? {...upload, progress} : upload));&#10;                    console.log(&quot;Upload progress:&quot;, progress);&#10;                }, async () =&gt;&#10;                {&#10;                    // On Canceled&#10;                    setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.entry !== entry));&#10;                    await refresh();&#10;                }&#10;            );&#10;            promises.push(promise);&#10;        }&#10;        await Promise.all(promises);&#10;        await refresh();&#10;        setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.uploadGroup !== uploadGroup));&#10;    }, [setFileUploadEntries, fileUploadEntries, path]);&#10;&#10;&#10;    const refresh = useCallback(async () =&gt;&#10;    {&#10;        scrollToTop();&#10;        setIsLoading(true);&#10;        const data = await getEntries(path);&#10;        data.entries = data.entries.sort((a, b) =&gt;&#10;        {&#10;            if (a.is_dir &amp;&amp; !b.is_dir) return -1; // Directories first&#10;            if (!a.is_dir &amp;&amp; b.is_dir) return 1; // Files after directories&#10;            return a.filename.localeCompare(b.filename); // Sort alphabetically&#10;        });&#10;        setData(data);&#10;        setIsLoading(false);&#10;        setSelectedEntries([]);&#10;        setContextMenuOptions({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    }, [path, data]);&#10;&#10;    const renameSelectedEntry = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!renamingEntry || newName.trim() === &quot;&quot; || newName === renamingEntry.filename)&#10;        {&#10;            setRenamingEntry(undefined);&#10;            return;&#10;        }&#10;&#10;        let newPath = `${path}/${newName}`;&#10;        try&#10;        {&#10;            await renameEntry(renamingEntry.path, newPath);&#10;            setRenamingEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Rename Failed&quot;,&#10;                body: &quot;An error occurred while renaming the entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [renamingEntry, path]);&#10;&#10;    const startEntryCreation = useCallback(async (directory: boolean) =&gt;&#10;    {&#10;        scrollToTop();&#10;        let filename = `New ${directory ? &quot;Directory&quot; : &quot;File.txt&quot;}`;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === filename))&#10;        {&#10;            index++;&#10;            filename = `New ${directory ? &quot;Directory&quot; : &quot;File&quot;} (${index}).txt`;&#10;        }&#10;        let entry = {filename, path, is_dir: directory, size: 0, file_type: directory ? &quot;Directory&quot; : &quot;File&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewItemCreationEntry(entry);&#10;    }, [data, path]);&#10;&#10;    const completeEntryCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!newItemCreationEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            await createEntry(newName, path, newItemCreationEntry.is_dir);&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Creation Failed&quot;,&#10;                body: &quot;An error occurred while create new entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path]);&#10;&#10;    const startArchiveCreation = useCallback(async () =&gt;&#10;    {&#10;        setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        scrollToTop();&#10;        let filename = &quot;New Archive&quot;;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === `${filename}.zip`))&#10;        {&#10;            index++;&#10;            filename = `New Archive (${index})`;&#10;        }&#10;        let entry = {filename, path, is_dir: false, size: 0, file_type: &quot;Archive&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewArchiveEntry({entry, progress: 0, files: selectedEntries.map(entry =&gt; entry.path), isUploading: false});&#10;    }, [path, data, selectedEntries]);&#10;    const completeArchiveCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        setNewArchiveEntry(prev =&gt; prev ? {...prev, isUploading: true} : undefined);&#10;        if (!newArchiveEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewArchiveEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            archiveFiles(`${newName}.zip`, newArchiveEntry.files, path, progress =&gt;&#10;            {&#10;                setNewArchiveEntry(prev =&gt; prev ? {...prev, progress} : undefined);&#10;                console.log(&quot;Archive progress:&quot;, progress);&#10;            }, async () =&gt;&#10;            {&#10;                setNewArchiveEntry(undefined);&#10;                await refresh();&#10;            }, error =&gt;&#10;            {&#10;                open({&#10;                    title: &quot;Archive Creation Failed&quot;,&#10;                    body: `An error occurred while creating the archive: ${error}`,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;                console.error(&quot;Failed to create archive:&quot;, error);&#10;            });&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to create archive:&quot;, error);&#10;            await open({&#10;                title: &quot;Archive Creation Failed&quot;,&#10;                body: &quot;An error occurred while creating the archive. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path, newArchiveEntry]);&#10;&#10;    const handleKeyDown = useCallback(async (e: KeyboardEvent&lt;HTMLTableElement&gt;) =&gt;&#10;    {&#10;&#10;        if (renamingEntry !== undefined)&#10;        {&#10;            e.preventDefault();&#10;            return;&#10;        }&#10;&#10;        if (e.key === &quot;Escape&quot;)&#10;        {&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        }&#10;        if (e.key === &quot;F2&quot;)&#10;        {&#10;            // Start renaming the first selected entry&#10;            if (selectedEntries.length &gt; 0)&#10;            {&#10;                e.preventDefault();&#10;                setRenamingEntry(selectedEntries[0]);&#10;                return;&#10;            }&#10;        }&#10;        if (e.key === &quot;Delete&quot; || e.key === &quot;Backspace&quot;)&#10;        {&#10;            await deleteSelected(selectedEntries);&#10;        }&#10;    }, [renamingEntry, refresh, renameSelectedEntry, selectedEntries]);&#10;&#10;    const deleteSelected = useCallback(async (entries: FilesystemEntry[]) =&gt;&#10;    {&#10;        // Handle delete action for selected entries&#10;        if (entries.length &gt; 0)&#10;        {&#10;            let response = await open({&#10;                title: &quot;Delete Files&quot;,&#10;                body: `Are you sure you want to delete ${entries.length &gt; 1 ? `${entries.length} files` : entries[0].filename}? This action cannot be undone.`,&#10;                responseType: MessageResponseType.OkayCancel,&#10;                severity: &quot;danger&quot;&#10;            });&#10;            if (response)&#10;            {&#10;                // Implement delete logic here&#10;                await deleteEntry(entries.map(entry =&gt; entry.path));&#10;                await refresh();&#10;            }&#10;        }&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        refresh().then();&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        $(document).on(&quot;click&quot;, e =&gt;&#10;        {&#10;            // Close context menu when clicking outside&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        }).on(&quot;blur&quot;, e =&gt;&#10;        {&#10;            // Close context menu when focus is lost&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        });&#10;        $(&quot;#server-files-table&quot;).parent().on(&quot;scroll&quot;, () =&gt;&#10;        {&#10;            // Close context menu when scrolling&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        });&#10;        return () =&gt;&#10;        {&#10;            $(document).off(&quot;click&quot;);&#10;            $(document).off(&quot;blur&quot;);&#10;            $(&quot;#server-files-table&quot;).parent().off(&quot;scroll&quot;);&#10;        };&#10;    }, []);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path))&#10;        {&#10;            // Load file contents for single text file selection&#10;            getFileContents(selectedEntries[0].path).then(contents =&gt;&#10;            {&#10;                setSelectedFileContents(contents);&#10;                setIsEditingFile(true);&#10;            }).catch(error =&gt;&#10;            {&#10;                console.error(&quot;Failed to load file contents:&quot;, error);&#10;                open({&#10;                    title: &quot;Load File Failed&quot;,&#10;                    body: &quot;An error occurred while loading the file contents. Please try again.&quot;,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;            });&#10;        } else&#10;        {&#10;            // Reset file contents when selection changes or multiple files are selected&#10;            setSelectedFileContents(&quot;&quot;);&#10;            setIsEditingFile(false);&#10;        }&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    return (&#10;        &lt;div className={&#10;            cn(&#10;                &quot;flex flex-row gap-2 bg-default-50&quot;&#10;            )&#10;        }&gt;&#10;            &lt;div&#10;                id={&quot;server-file-browser&quot;}&#10;                className={&#10;                    cn(&#10;                        &quot;flex flex-col gap-2 p-4 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] relative grow&quot;&#10;                    )&#10;                }&#10;                onDragStart={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnd={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnter={() =&gt; setIsDraggingOver(true)}&#10;                onDragExit={() =&gt; setIsDraggingOver(false)}&#10;                onDragOver={e =&gt; e.preventDefault()}&#10;                onDrop={async e =&gt;&#10;                {&#10;                    e.preventDefault();&#10;                    console.log(&quot;Files dropped:&quot;, e.dataTransfer.files);&#10;                    setIsDraggingOver(false);&#10;                    await upload([...e.dataTransfer.files]);&#10;                }}&#10;                data-dragging-over={isDraggingOver}&#10;            &gt;&#10;                {isDraggingOver &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 z-30 border-dotted border-4 border-primary bg-background/90 flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;font-minecraft-body text-4xl&quot;&gt;Drop Files to Upload&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className={&quot;flex flex-row justify-between items-center&quot;}&gt;&#10;                    &lt;FileTableBreadcrumbs onNavigate={setPath} paths={path.split(&quot;/&quot;).filter(p =&gt; p.trim() !== &quot;&quot;)}/&gt;&#10;                    &lt;ButtonGroup radius={&quot;none&quot;} variant={&quot;flat&quot;}&gt;&#10;                        &lt;Tooltip content={&quot;New File&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(false)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:file-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;New Directory&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(true)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:folder-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Refresh Files&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} isDisabled={isLoading} onPress={refresh}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:repeat&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;                &lt;ErrorBoundary&gt;&#10;                    &lt;Table&#10;                        id={&quot;server-files-table&quot;}&#10;                        removeWrapper&#10;                        radius={&quot;none&quot;}&#10;                        className={cn(&quot;font-minecraft-body overflow-y-auto&quot;)}&#10;                        fullWidth&#10;                        color={&quot;primary&quot;}&#10;                        aria-label={&quot;Server Files&quot;}&#10;                        selectionMode={&quot;multiple&quot;}&#10;                        selectionBehavior={&quot;replace&quot;}&#10;                        showSelectionCheckboxes={false}&#10;                        isHeaderSticky&#10;                        classNames={{&#10;                            tr: &quot;!rounded-none&quot;,&#10;                            th: &quot;backdrop-blur-md bg-default-50/50 !rounded-none&quot;&#10;                        }}&#10;                        selectedKeys={selectedEntries.map(entry =&gt; entry.filename)}&#10;                        onSelectionChange={keys =&gt;&#10;                        {&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                            const selected = [...keys].map(key =&gt; data?.entries.find(entry =&gt; entry.filename === key)).filter(Boolean) as FilesystemEntry[];&#10;                            setSelectedEntries(selected);&#10;                        }}&#10;                        isKeyboardNavigationDisabled={true}&#10;                        onKeyDown={handleKeyDown}&#10;                    &gt;&#10;                        &lt;TableHeader&gt;&#10;                            &lt;TableColumn&gt;Name&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Type&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Size&lt;/TableColumn&gt;&#10;                            &lt;TableColumn width={48} hideHeader hidden={isEditingFile}&gt;Action&lt;/TableColumn&gt;&#10;                        &lt;/TableHeader&gt;&#10;                        &lt;TableBody&gt;&#10;                            {isLoading ? Array.from({length: 5}, (_, i) =&gt; (&#10;                                &lt;TableRow key={`skeleton-${i}`}&gt;&#10;                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-8&quot;}/&gt;&#10;                                        &lt;Skeleton className={&quot;w-32 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-24 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-16 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                &lt;/TableRow&gt;&#10;                            )) : (&#10;                                &lt;&gt;&#10;                                    {data?.entries?.length === 0 &amp;&amp; fileUploadEntries.length === 0 ? (&#10;                                        &lt;TableRow&gt;&#10;                                            &lt;TableCell colSpan={4} className=&quot;text-center text-gray-500&quot;&gt;&#10;                                                This directory is empty&#10;                                            &lt;/TableCell&gt;&#10;                                        &lt;/TableRow&gt;&#10;                                    ) : (&#10;                                        &lt;&gt;&#10;                                            {fileUploadEntries.map(upload =&gt; (&#10;                                                &lt;TableRow key={`upload-${upload.entry.filename}`}&gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        &lt;FileEntryIcon entry={upload.entry}/&gt; {upload.entry.filename}&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;{upload.entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;&#10;                                                        &lt;Progress&#10;                                                            minValue={0}&#10;                                                            maxValue={1}&#10;                                                            value={upload.progress}&#10;                                                            size={&quot;sm&quot;}&#10;                                                        /&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell&gt;&#10;                                                        &lt;&gt;&lt;/&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            ))}&#10;                                            {data?.entries.map(entry =&gt;&#10;&#10;                                                &lt;TableRow&#10;                                                    key={entry.filename}&#10;                                                    onContextMenu={e =&gt;&#10;                                                    {&#10;                                                        e.preventDefault();&#10;                                                        setContextMenuOptions({&#10;                                                            entry: selectedEntries.length &gt; 1 ? selectedEntries : entry,&#10;                                                            x: e.clientX - 30,&#10;                                                            y: e.clientY - 50,&#10;                                                            isOpen: true&#10;                                                        });&#10;                                                    }}&#10;                                                    data-selected={contextMenuOptions.entry === entry &amp;&amp; contextMenuOptions.isOpen}&#10;                                                    className={&quot;data-[selected=true]:opacity-50 data-[selected=true]:bg-white/10&quot;}&#10;                                                    onDoubleClick={() =&gt;&#10;                                                    {&#10;                                                        if (entry.is_dir &amp;&amp; !renamingEntry &amp;&amp; !newItemCreationEntry)&#10;                                                        {&#10;                                                            setPath(prev =&gt; prev ? `${prev}/${entry.filename}` : entry.filename);&#10;                                                        }&#10;                                                    }}&#10;                                                &gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        {renamingEntry === entry ?&#10;                                                            &lt;Input&#10;                                                                startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                defaultValue={entry.filename}&#10;                                                                autoFocus&#10;                                                                onBlur={e =&gt; renameSelectedEntry(e.currentTarget.value)}&#10;                                                                onKeyDown={async e =&gt;&#10;                                                                {&#10;                                                                    if (e.key === &quot;Enter&quot;) await renameSelectedEntry(e.currentTarget.value);&#10;                                                                }}&#10;                                                                radius={&quot;none&quot;}&#10;                                                                className={&quot;font-minecraft-body&quot;}&#10;                                                            /&gt; :&#10;                                                            newItemCreationEntry === entry ?&#10;                                                                &lt;Input&#10;                                                                    startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                    defaultValue={entry.filename}&#10;                                                                    autoFocus&#10;                                                                    onBlur={e =&gt; completeEntryCreation(e.currentTarget.value)}&#10;                                                                    onKeyDown={async e =&gt;&#10;                                                                    {&#10;                                                                        if (e.key === &quot;Enter&quot;) await completeEntryCreation(e.currentTarget.value);&#10;                                                                    }}&#10;                                                                    radius={&quot;none&quot;}&#10;                                                                    className={&quot;font-minecraft-body&quot;}&#10;                                                                /&gt;&#10;                                                                : (newArchiveEntry?.entry === entry &amp;&amp; !newArchiveEntry.isUploading) ?&#10;                                                                    &lt;Input&#10;                                                                        startContent={&lt;FileEntryIcon entry={{filename: &quot;.zip&quot;} as FilesystemEntry}/&gt;}&#10;                                                                        defaultValue={entry.filename}&#10;                                                                        autoFocus&#10;                                                                        onBlur={e =&gt; completeArchiveCreation(e.currentTarget.value)}&#10;                                                                        onKeyDown={async e =&gt;&#10;                                                                        {&#10;                                                                            if (e.key === &quot;Enter&quot;) await completeArchiveCreation(e.currentTarget.value);&#10;                                                                        }}&#10;                                                                        radius={&quot;none&quot;}&#10;                                                                        className={&quot;font-minecraft-body&quot;}&#10;                                                                        endContent={&lt;Chip&gt;.zip&lt;/Chip&gt;}&#10;                                                                    /&gt;&#10;                                                                    :&#10;                                                                    &lt;&gt;&lt;FileEntryIcon entry={entry}/&gt; {entry.filename}&lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;{entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        {entry === newArchiveEntry?.entry ?&#10;                                                            &lt;&gt;&#10;                                                                &lt;Progress&#10;                                                                    minValue={0}&#10;                                                                    maxValue={100}&#10;                                                                    value={newArchiveEntry.progress}&#10;                                                                    size={&quot;sm&quot;}&#10;                                                                /&gt;&#10;                                                            &lt;/&gt;&#10;                                                            :&#10;                                                            &lt;&gt;&#10;                                                                {entry.is_dir ? &quot;-&quot; : Math.convertToByteString(entry.size)}&#10;                                                            &lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        &lt;Button&#10;                                                            isIconOnly&#10;                                                            radius={&quot;none&quot;}&#10;                                                            variant={&quot;light&quot;}&#10;                                                            onPress={e =&gt;&#10;                                                            {&#10;                                                                let position = $(e.target).offset();&#10;                                                                if (!position) return;&#10;                                                                setContextMenuOptions({&#10;                                                                    entry,&#10;                                                                    x: position.left - 264,&#10;                                                                    y: position.top,&#10;                                                                    isOpen: true&#10;                                                                });&#10;                                                            }}&#10;                                                        &gt;&#10;                                                            &lt;Icon icon={&quot;pixelarticons:more-horizontal&quot;}/&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            )}&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            )}&#10;                        &lt;/TableBody&gt;&#10;                    &lt;/Table&gt;&#10;                &lt;/ErrorBoundary&gt;&#10;                &lt;RowContextMenu&#10;                    {...contextMenuOptions}&#10;                    onRename={setRenamingEntry}&#10;                    onDelete={deleteSelected}&#10;                    onArchive={startArchiveCreation}&#10;                    onClose={() =&gt; setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}))}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;            &lt;motion.div&#10;                className={&quot;max-h-[calc(100dvh_-_400px)] w-full h-screen min-h-[300px]&quot;}&#10;                initial={{opacity: 0, width: 0}}&#10;                animate={{opacity: 1, width: isEditingFile &amp;&amp; selectedEntries.length === 1 ? &quot;100%&quot; : &quot;0&quot;}}&#10;                exit={{opacity: 0, width: 0}}&#10;                transition={{duration: 0.3, ease: &quot;easeInOut&quot;}}&#10;                data-editing-file={isEditingFile &amp;&amp; selectedEntries.length === 1}&#10;            &gt;&#10;                &lt;Editor&#10;                    className={&quot;w-full h-full&quot;}&#10;                    theme={&quot;vs-dark&quot;}&#10;                    value={isEditingFile ? selectedFileContents : &quot;&quot;}&#10;                    language={getMonacoLanguage(selectedEntries[0]?.path ?? &quot;&quot;) ?? &quot;auto&quot;}&#10;                    options={{&#10;                        fontSize: 14,&#10;                        minimap: {enabled: false},&#10;                        lineNumbers: &quot;on&quot;,&#10;                        scrollBeyondLastLine: false,&#10;                        automaticLayout: true,&#10;                        wordWrap: &quot;on&quot;,&#10;                        tabSize: 2,&#10;                        contextmenu: false,&#10;                        autoClosingBrackets: &quot;always&quot;,&#10;                        autoClosingOvertype: &quot;always&quot;,&#10;                        autoClosingQuotes: &quot;always&quot;,&#10;                        // Enhanced autocompletion options&#10;                        quickSuggestions: {&#10;                            other: true,&#10;                            comments: false,&#10;                            strings: true&#10;                        },&#10;                        suggestOnTriggerCharacters: true,&#10;                        acceptSuggestionOnEnter: &quot;on&quot;,&#10;                        tabCompletion: &quot;on&quot;,&#10;                        wordBasedSuggestions: &quot;matchingDocuments&quot;,&#10;                        // Enhanced validation and hints&#10;                        parameterHints: {&#10;                            enabled: true,&#10;                            cycle: true&#10;                        },&#10;                        // Format on paste and type&#10;                        formatOnPaste: true,&#10;                        formatOnType: true,&#10;                        // Bracket matching&#10;                        matchBrackets: &quot;always&quot;,&#10;                        // Auto indentation&#10;                        autoIndent: &quot;full&quot;,&#10;                        // Folding&#10;                        folding: true,&#10;                        foldingStrategy: &quot;indentation&quot;,&#10;                        // Suggestions&#10;                        suggest: {&#10;                            showKeywords: true,&#10;                            showSnippets: true,&#10;                            showFunctions: true,&#10;                            showConstructors: true,&#10;                            showFields: true,&#10;                            showVariables: true,&#10;                            showClasses: true,&#10;                            showStructs: true,&#10;                            showInterfaces: true,&#10;                            showModules: true,&#10;                            showProperties: true,&#10;                            showEvents: true,&#10;                            showOperators: true,&#10;                            showUnits: true,&#10;                            showValues: true,&#10;                            showConstants: true,&#10;                            showEnums: true,&#10;                            showEnumMembers: true,&#10;                            showColors: true,&#10;                            showFiles: true,&#10;                            showReferences: true,&#10;                            showFolders: true,&#10;                            showTypeParameters: true,&#10;                            showUsers: true,&#10;                            showIssues: true&#10;                        }&#10;                    }}&#10;                /&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import {Button, ButtonGroup, Chip, cn, Input, Progress, Skeleton, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from &quot;@heroui/react&quot;;&#10;import {useServer} from &quot;../../../../providers/ServerProvider.tsx&quot;;&#10;import {KeyboardEvent, useCallback, useEffect, useState} from &quot;react&quot;;&#10;import {FilesystemData, FilesystemEntry} from &quot;../../../../ts/filesystem.ts&quot;;&#10;import &quot;../../../../ts/math-ext.ts&quot;;&#10;import {Icon} from &quot;@iconify-icon/react&quot;;&#10;import $ from &quot;jquery&quot;;&#10;import {ContextMenuOptions, RowContextMenu} from &quot;./RowContextMenu.tsx&quot;;&#10;import {useMessage} from &quot;../../../../providers/MessageProvider.tsx&quot;;&#10;import {MessageResponseType} from &quot;../../../MessageModal.tsx&quot;;&#10;import {FileTableBreadcrumbs} from &quot;./FileTableBreadcrumbs.tsx&quot;;&#10;import {Tooltip} from &quot;../../../extended/Tooltip.tsx&quot;;&#10;import {ErrorBoundary} from &quot;../../../ErrorBoundry.tsx&quot;;&#10;import {FileEntryIcon} from &quot;./FileEntryIcon.tsx&quot;;&#10;import {Editor} from &quot;@monaco-editor/react&quot;;&#10;import {getMonacoLanguage, isTextFile} from &quot;../../../../ts/file-type-match.ts&quot;;&#10;import {registerMinecraftPropertiesLanguage} from &quot;../../../../ts/minecraft-properties-language.ts&quot;;&#10;import {motion} from &quot;framer-motion&quot;;&#10;&#10;type UploadProgress = {&#10;    entry: FilesystemEntry;&#10;    progress: number;&#10;    files: string[]&#10;    isUploading: boolean;&#10;    uploadGroup?: string;&#10;}&#10;&#10;&#10;export function ServerFiles()&#10;{&#10;    const {getEntries, renameEntry, createEntry, deleteEntry, uploadFile, archiveFiles, getFileContents, setFileContents} = useServer();&#10;    const {open} = useMessage();&#10;    const [path, setPath] = useState(&quot;&quot;);&#10;    const [data, setData] = useState&lt;FilesystemData&gt;();&#10;    const [selectedEntries, setSelectedEntries] = useState&lt;FilesystemEntry[]&gt;([]);&#10;    const [contextMenuOptions, setContextMenuOptions] = useState&lt;ContextMenuOptions&gt;({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [renamingEntry, setRenamingEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newItemCreationEntry, setNewItemCreationEntry] = useState&lt;FilesystemEntry | undefined&gt;(undefined);&#10;    const [newArchiveEntry, setNewArchiveEntry] = useState&lt;UploadProgress | undefined&gt;(undefined);&#10;    const [fileUploadEntries, setFileUploadEntries] = useState&lt;UploadProgress[]&gt;([]);&#10;    const [isDraggingOver, setIsDraggingOver] = useState(false);&#10;    const [isEditingFile, setIsEditingFile] = useState(true);&#10;    const [selectedFileContents, setSelectedFileContents] = useState(&quot;&quot;);&#10;&#10;    const scrollToTop = useCallback(() =&gt;&#10;    {&#10;        $(&quot;#server-files-table&quot;).parent().scrollTop(0);&#10;    }, [path]);&#10;&#10;    const upload = useCallback(async (files: File[]) =&gt;&#10;    {&#10;        let uploadGroup = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);&#10;        let promises = [];&#10;        for (let file of files)&#10;        {&#10;            let entry = {filename: file.name, path, is_dir: false, size: file.size, file_type: file.type} as FilesystemEntry;&#10;            setFileUploadEntries(prev =&gt; [...prev, {entry, progress: 0, files: [file.name], isUploading: true, uploadGroup}]);&#10;            let totalSize = file.size;&#10;            const {promise} = await uploadFile(file, entry.path, async bytes =&gt;&#10;                {&#10;                    let progress = bytes / totalSize;&#10;                    setFileUploadEntries(prev =&gt; prev.map(upload =&gt; upload.entry === entry ? {...upload, progress} : upload));&#10;                    console.log(&quot;Upload progress:&quot;, progress);&#10;                }, async () =&gt;&#10;                {&#10;                    // On Canceled&#10;                    setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.entry !== entry));&#10;                    await refresh();&#10;                }&#10;            );&#10;            promises.push(promise);&#10;        }&#10;        await Promise.all(promises);&#10;        await refresh();&#10;        setFileUploadEntries(prev =&gt; prev.filter(upload =&gt; upload.uploadGroup !== uploadGroup));&#10;    }, [setFileUploadEntries, fileUploadEntries, path]);&#10;&#10;&#10;    const refresh = useCallback(async () =&gt;&#10;    {&#10;        scrollToTop();&#10;        setIsLoading(true);&#10;        const data = await getEntries(path);&#10;        data.entries = data.entries.sort((a, b) =&gt;&#10;        {&#10;            if (a.is_dir &amp;&amp; !b.is_dir) return -1; // Directories first&#10;            if (!a.is_dir &amp;&amp; b.is_dir) return 1; // Files after directories&#10;            return a.filename.localeCompare(b.filename); // Sort alphabetically&#10;        });&#10;        setData(data);&#10;        setIsLoading(false);&#10;        setSelectedEntries([]);&#10;        setContextMenuOptions({entry: undefined, x: 0, y: 0, isOpen: false});&#10;    }, [path, data]);&#10;&#10;    const renameSelectedEntry = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!renamingEntry || newName.trim() === &quot;&quot; || newName === renamingEntry.filename)&#10;        {&#10;            setRenamingEntry(undefined);&#10;            return;&#10;        }&#10;&#10;        let newPath = `${path}/${newName}`;&#10;        try&#10;        {&#10;            await renameEntry(renamingEntry.path, newPath);&#10;            setRenamingEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Rename Failed&quot;,&#10;                body: &quot;An error occurred while renaming the entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [renamingEntry, path]);&#10;&#10;    const startEntryCreation = useCallback(async (directory: boolean) =&gt;&#10;    {&#10;        scrollToTop();&#10;        let filename = `New ${directory ? &quot;Directory&quot; : &quot;File.txt&quot;}`;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === filename))&#10;        {&#10;            index++;&#10;            filename = `New ${directory ? &quot;Directory&quot; : &quot;File&quot;} (${index}).txt`;&#10;        }&#10;        let entry = {filename, path, is_dir: directory, size: 0, file_type: directory ? &quot;Directory&quot; : &quot;File&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewItemCreationEntry(entry);&#10;    }, [data, path]);&#10;&#10;    const completeEntryCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        if (!newItemCreationEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            await createEntry(newName, path, newItemCreationEntry.is_dir);&#10;            setNewItemCreationEntry(undefined);&#10;            await refresh();&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to rename entry:&quot;, error);&#10;            await open({&#10;                title: &quot;Creation Failed&quot;,&#10;                body: &quot;An error occurred while create new entry. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path]);&#10;&#10;    const startArchiveCreation = useCallback(async () =&gt;&#10;    {&#10;        setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        scrollToTop();&#10;        let filename = &quot;New Archive&quot;;&#10;        let index = 0;&#10;        while (data?.entries.some(entry =&gt; entry.filename === `${filename}.zip`))&#10;        {&#10;            index++;&#10;            filename = `New Archive (${index})`;&#10;        }&#10;        let entry = {filename, path, is_dir: false, size: 0, file_type: &quot;Archive&quot;} as FilesystemEntry;&#10;        setData(prev =&gt; ({...prev, entries: [entry, ...(prev?.entries || [])]} as FilesystemData));&#10;        setNewArchiveEntry({entry, progress: 0, files: selectedEntries.map(entry =&gt; entry.path), isUploading: false});&#10;    }, [path, data, selectedEntries]);&#10;    const completeArchiveCreation = useCallback(async (newName: string) =&gt;&#10;    {&#10;        setNewArchiveEntry(prev =&gt; prev ? {...prev, isUploading: true} : undefined);&#10;        if (!newArchiveEntry || newName.trim() === &quot;&quot;)&#10;        {&#10;            setNewArchiveEntry(undefined);&#10;            await refresh();&#10;            return;&#10;        }&#10;&#10;        try&#10;        {&#10;            archiveFiles(`${newName}.zip`, newArchiveEntry.files, path, progress =&gt;&#10;            {&#10;                setNewArchiveEntry(prev =&gt; prev ? {...prev, progress} : undefined);&#10;                console.log(&quot;Archive progress:&quot;, progress);&#10;            }, async () =&gt;&#10;            {&#10;                setNewArchiveEntry(undefined);&#10;                await refresh();&#10;            }, error =&gt;&#10;            {&#10;                open({&#10;                    title: &quot;Archive Creation Failed&quot;,&#10;                    body: `An error occurred while creating the archive: ${error}`,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;                console.error(&quot;Failed to create archive:&quot;, error);&#10;            });&#10;        } catch (error)&#10;        {&#10;            console.error(&quot;Failed to create archive:&quot;, error);&#10;            await open({&#10;                title: &quot;Archive Creation Failed&quot;,&#10;                body: &quot;An error occurred while creating the archive. Please try again.&quot;,&#10;                responseType: MessageResponseType.Close,&#10;                severity: &quot;danger&quot;&#10;            });&#10;        }&#10;    }, [data, path, newArchiveEntry]);&#10;&#10;    const handleKeyDown = useCallback(async (e: KeyboardEvent&lt;HTMLTableElement&gt;) =&gt;&#10;    {&#10;&#10;        if (renamingEntry !== undefined)&#10;        {&#10;            e.preventDefault();&#10;            return;&#10;        }&#10;&#10;        if (e.key === &quot;Escape&quot;)&#10;        {&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        }&#10;        if (e.key === &quot;F2&quot;)&#10;        {&#10;            // Start renaming the first selected entry&#10;            if (selectedEntries.length &gt; 0)&#10;            {&#10;                e.preventDefault();&#10;                setRenamingEntry(selectedEntries[0]);&#10;                return;&#10;            }&#10;        }&#10;        if (e.key === &quot;Delete&quot; || e.key === &quot;Backspace&quot;)&#10;        {&#10;            await deleteSelected(selectedEntries);&#10;        }&#10;    }, [renamingEntry, refresh, renameSelectedEntry, selectedEntries]);&#10;&#10;    const deleteSelected = useCallback(async (entries: FilesystemEntry[]) =&gt;&#10;    {&#10;        // Handle delete action for selected entries&#10;        if (entries.length &gt; 0)&#10;        {&#10;            let response = await open({&#10;                title: &quot;Delete Files&quot;,&#10;                body: `Are you sure you want to delete ${entries.length &gt; 1 ? `${entries.length} files` : entries[0].filename}? This action cannot be undone.`,&#10;                responseType: MessageResponseType.OkayCancel,&#10;                severity: &quot;danger&quot;&#10;            });&#10;            if (response)&#10;            {&#10;                // Implement delete logic here&#10;                await deleteEntry(entries.map(entry =&gt; entry.path));&#10;                await refresh();&#10;            }&#10;        }&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        refresh().then();&#10;    }, [path]);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        // Register the Minecraft properties language&#10;        registerMinecraftPropertiesLanguage();&#10;    }, []);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        $(document).on(&quot;click&quot;, e =&gt;&#10;        {&#10;            // Close context menu when clicking outside&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        }).on(&quot;blur&quot;, e =&gt;&#10;        {&#10;            // Close context menu when focus is lost&#10;            if (!$(e.target).closest(&quot;#server-files-context-menu&quot;).length)&#10;            {&#10;                setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;            }&#10;        });&#10;        $(&quot;#server-files-table&quot;).parent().on(&quot;scroll&quot;, () =&gt;&#10;        {&#10;            // Close context menu when scrolling&#10;            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;        });&#10;        return () =&gt;&#10;        {&#10;            $(document).off(&quot;click&quot;);&#10;            $(document).off(&quot;blur&quot;);&#10;            $(&quot;#server-files-table&quot;).parent().off(&quot;scroll&quot;);&#10;        };&#10;    }, []);&#10;&#10;    useEffect(() =&gt;&#10;    {&#10;        if (selectedEntries.length === 1 &amp;&amp; isTextFile(selectedEntries[0].path))&#10;        {&#10;            // Load file contents for single text file selection&#10;            getFileContents(selectedEntries[0].path).then(contents =&gt;&#10;            {&#10;                setSelectedFileContents(contents);&#10;                setIsEditingFile(true);&#10;            }).catch(error =&gt;&#10;            {&#10;                console.error(&quot;Failed to load file contents:&quot;, error);&#10;                open({&#10;                    title: &quot;Load File Failed&quot;,&#10;                    body: &quot;An error occurred while loading the file contents. Please try again.&quot;,&#10;                    responseType: MessageResponseType.Close,&#10;                    severity: &quot;danger&quot;&#10;                });&#10;            });&#10;        } else&#10;        {&#10;            // Reset file contents when selection changes or multiple files are selected&#10;            setSelectedFileContents(&quot;&quot;);&#10;            setIsEditingFile(false);&#10;        }&#10;    }, [selectedEntries, isEditingFile]);&#10;&#10;    return (&#10;        &lt;div className={&#10;            cn(&#10;                &quot;flex flex-row gap-2 bg-default-50&quot;&#10;            )&#10;        }&gt;&#10;            &lt;div&#10;                id={&quot;server-file-browser&quot;}&#10;                className={&#10;                    cn(&#10;                        &quot;flex flex-col gap-2 p-4 bg-default-50 max-h-[calc(100dvh_-_400px)] h-screen min-h-[300px] relative grow&quot;&#10;                    )&#10;                }&#10;                onDragStart={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnd={() =&gt; setIsDraggingOver(false)}&#10;                onDragEnter={() =&gt; setIsDraggingOver(true)}&#10;                onDragExit={() =&gt; setIsDraggingOver(false)}&#10;                onDragOver={e =&gt; e.preventDefault()}&#10;                onDrop={async e =&gt;&#10;                {&#10;                    e.preventDefault();&#10;                    console.log(&quot;Files dropped:&quot;, e.dataTransfer.files);&#10;                    setIsDraggingOver(false);&#10;                    await upload([...e.dataTransfer.files]);&#10;                }}&#10;                data-dragging-over={isDraggingOver}&#10;            &gt;&#10;                {isDraggingOver &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 z-30 border-dotted border-4 border-primary bg-background/90 flex items-center justify-center&quot;&gt;&#10;                        &lt;span className=&quot;font-minecraft-body text-4xl&quot;&gt;Drop Files to Upload&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className={&quot;flex flex-row justify-between items-center&quot;}&gt;&#10;                    &lt;FileTableBreadcrumbs onNavigate={setPath} paths={path.split(&quot;/&quot;).filter(p =&gt; p.trim() !== &quot;&quot;)}/&gt;&#10;                    &lt;ButtonGroup radius={&quot;none&quot;} variant={&quot;flat&quot;}&gt;&#10;                        &lt;Tooltip content={&quot;New File&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(false)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:file-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;New Directory&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} onPress={() =&gt; startEntryCreation(true)}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:folder-plus&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                        &lt;Tooltip content={&quot;Refresh Files&quot;}&gt;&#10;                            &lt;Button radius={&quot;none&quot;} isIconOnly className={&quot;text-xl&quot;} isDisabled={isLoading} onPress={refresh}&gt;&#10;                                &lt;Icon icon={&quot;pixelarticons:repeat&quot;}/&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/Tooltip&gt;&#10;                    &lt;/ButtonGroup&gt;&#10;                &lt;/div&gt;&#10;                &lt;ErrorBoundary&gt;&#10;                    &lt;Table&#10;                        id={&quot;server-files-table&quot;}&#10;                        removeWrapper&#10;                        radius={&quot;none&quot;}&#10;                        className={cn(&quot;font-minecraft-body overflow-y-auto&quot;)}&#10;                        fullWidth&#10;                        color={&quot;primary&quot;}&#10;                        aria-label={&quot;Server Files&quot;}&#10;                        selectionMode={&quot;multiple&quot;}&#10;                        selectionBehavior={&quot;replace&quot;}&#10;                        showSelectionCheckboxes={false}&#10;                        isHeaderSticky&#10;                        classNames={{&#10;                            tr: &quot;!rounded-none&quot;,&#10;                            th: &quot;backdrop-blur-md bg-default-50/50 !rounded-none&quot;&#10;                        }}&#10;                        selectedKeys={selectedEntries.map(entry =&gt; entry.filename)}&#10;                        onSelectionChange={keys =&gt;&#10;                        {&#10;                            setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}));&#10;                            const selected = [...keys].map(key =&gt; data?.entries.find(entry =&gt; entry.filename === key)).filter(Boolean) as FilesystemEntry[];&#10;                            setSelectedEntries(selected);&#10;                        }}&#10;                        isKeyboardNavigationDisabled={true}&#10;                        onKeyDown={handleKeyDown}&#10;                    &gt;&#10;                        &lt;TableHeader&gt;&#10;                            &lt;TableColumn&gt;Name&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Type&lt;/TableColumn&gt;&#10;                            &lt;TableColumn hidden={isEditingFile}&gt;Size&lt;/TableColumn&gt;&#10;                            &lt;TableColumn width={48} hideHeader hidden={isEditingFile}&gt;Action&lt;/TableColumn&gt;&#10;                        &lt;/TableHeader&gt;&#10;                        &lt;TableBody&gt;&#10;                            {isLoading ? Array.from({length: 5}, (_, i) =&gt; (&#10;                                &lt;TableRow key={`skeleton-${i}`}&gt;&#10;                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-8&quot;}/&gt;&#10;                                        &lt;Skeleton className={&quot;w-32 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-24 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-16 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                    &lt;TableCell&gt;&#10;                                        &lt;Skeleton className={&quot;w-8 h-6&quot;}/&gt;&#10;                                    &lt;/TableCell&gt;&#10;                                &lt;/TableRow&gt;&#10;                            )) : (&#10;                                &lt;&gt;&#10;                                    {data?.entries?.length === 0 &amp;&amp; fileUploadEntries.length === 0 ? (&#10;                                        &lt;TableRow&gt;&#10;                                            &lt;TableCell colSpan={4} className=&quot;text-center text-gray-500&quot;&gt;&#10;                                                This directory is empty&#10;                                            &lt;/TableCell&gt;&#10;                                        &lt;/TableRow&gt;&#10;                                    ) : (&#10;                                        &lt;&gt;&#10;                                            {fileUploadEntries.map(upload =&gt; (&#10;                                                &lt;TableRow key={`upload-${upload.entry.filename}`}&gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        &lt;FileEntryIcon entry={upload.entry}/&gt; {upload.entry.filename}&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;{upload.entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;}&gt;&#10;                                                        &lt;Progress&#10;                                                            minValue={0}&#10;                                                            maxValue={1}&#10;                                                            value={upload.progress}&#10;                                                            size={&quot;sm&quot;}&#10;                                                        /&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell&gt;&#10;                                                        &lt;&gt;&lt;/&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            ))}&#10;                                            {data?.entries.map(entry =&gt;&#10;&#10;                                                &lt;TableRow&#10;                                                    key={entry.filename}&#10;                                                    onContextMenu={e =&gt;&#10;                                                    {&#10;                                                        e.preventDefault();&#10;                                                        setContextMenuOptions({&#10;                                                            entry: selectedEntries.length &gt; 1 ? selectedEntries : entry,&#10;                                                            x: e.clientX - 30,&#10;                                                            y: e.clientY - 50,&#10;                                                            isOpen: true&#10;                                                        });&#10;                                                    }}&#10;                                                    data-selected={contextMenuOptions.entry === entry &amp;&amp; contextMenuOptions.isOpen}&#10;                                                    className={&quot;data-[selected=true]:opacity-50 data-[selected=true]:bg-white/10&quot;}&#10;                                                    onDoubleClick={() =&gt;&#10;                                                    {&#10;                                                        if (entry.is_dir &amp;&amp; !renamingEntry &amp;&amp; !newItemCreationEntry)&#10;                                                        {&#10;                                                            setPath(prev =&gt; prev ? `${prev}/${entry.filename}` : entry.filename);&#10;                                                        }&#10;                                                    }}&#10;                                                &gt;&#10;                                                    &lt;TableCell className={&quot;flex items-center h-14 gap-2&quot;}&gt;&#10;                                                        {renamingEntry === entry ?&#10;                                                            &lt;Input&#10;                                                                startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                defaultValue={entry.filename}&#10;                                                                autoFocus&#10;                                                                onBlur={e =&gt; renameSelectedEntry(e.currentTarget.value)}&#10;                                                                onKeyDown={async e =&gt;&#10;                                                                {&#10;                                                                    if (e.key === &quot;Enter&quot;) await renameSelectedEntry(e.currentTarget.value);&#10;                                                                }}&#10;                                                                radius={&quot;none&quot;}&#10;                                                                className={&quot;font-minecraft-body&quot;}&#10;                                                            /&gt; :&#10;                                                            newItemCreationEntry === entry ?&#10;                                                                &lt;Input&#10;                                                                    startContent={&lt;FileEntryIcon entry={entry}/&gt;}&#10;                                                                    defaultValue={entry.filename}&#10;                                                                    autoFocus&#10;                                                                    onBlur={e =&gt; completeEntryCreation(e.currentTarget.value)}&#10;                                                                    onKeyDown={async e =&gt;&#10;                                                                    {&#10;                                                                        if (e.key === &quot;Enter&quot;) await completeEntryCreation(e.currentTarget.value);&#10;                                                                    }}&#10;                                                                    radius={&quot;none&quot;}&#10;                                                                    className={&quot;font-minecraft-body&quot;}&#10;                                                                /&gt;&#10;                                                                : (newArchiveEntry?.entry === entry &amp;&amp; !newArchiveEntry.isUploading) ?&#10;                                                                    &lt;Input&#10;                                                                        startContent={&lt;FileEntryIcon entry={{filename: &quot;.zip&quot;} as FilesystemEntry}/&gt;}&#10;                                                                        defaultValue={entry.filename}&#10;                                                                        autoFocus&#10;                                                                        onBlur={e =&gt; completeArchiveCreation(e.currentTarget.value)}&#10;                                                                        onKeyDown={async e =&gt;&#10;                                                                        {&#10;                                                                            if (e.key === &quot;Enter&quot;) await completeArchiveCreation(e.currentTarget.value);&#10;                                                                        }}&#10;                                                                        radius={&quot;none&quot;}&#10;                                                                        className={&quot;font-minecraft-body&quot;}&#10;                                                                        endContent={&lt;Chip&gt;.zip&lt;/Chip&gt;}&#10;                                                                    /&gt;&#10;                                                                    :&#10;                                                                    &lt;&gt;&lt;FileEntryIcon entry={entry}/&gt; {entry.filename}&lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;{entry.file_type}&lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        {entry === newArchiveEntry?.entry ?&#10;                                                            &lt;&gt;&#10;                                                                &lt;Progress&#10;                                                                    minValue={0}&#10;                                                                    maxValue={100}&#10;                                                                    value={newArchiveEntry.progress}&#10;                                                                    size={&quot;sm&quot;}&#10;                                                                /&gt;&#10;                                                            &lt;/&gt;&#10;                                                            :&#10;                                                            &lt;&gt;&#10;                                                                {entry.is_dir ? &quot;-&quot; : Math.convertToByteString(entry.size)}&#10;                                                            &lt;/&gt;&#10;                                                        }&#10;                                                    &lt;/TableCell&gt;&#10;                                                    &lt;TableCell className={&quot;text-gray-500&quot;} hidden={isEditingFile}&gt;&#10;                                                        &lt;Button&#10;                                                            isIconOnly&#10;                                                            radius={&quot;none&quot;}&#10;                                                            variant={&quot;light&quot;}&#10;                                                            onPress={e =&gt;&#10;                                                            {&#10;                                                                let position = $(e.target).offset();&#10;                                                                if (!position) return;&#10;                                                                setContextMenuOptions({&#10;                                                                    entry,&#10;                                                                    x: position.left - 264,&#10;                                                                    y: position.top,&#10;                                                                    isOpen: true&#10;                                                                });&#10;                                                            }}&#10;                                                        &gt;&#10;                                                            &lt;Icon icon={&quot;pixelarticons:more-horizontal&quot;}/&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    &lt;/TableCell&gt;&#10;                                                &lt;/TableRow&gt;&#10;                                            )}&#10;                                        &lt;/&gt;&#10;                                    )}&#10;                                &lt;/&gt;&#10;                            )}&#10;                        &lt;/TableBody&gt;&#10;                    &lt;/Table&gt;&#10;                &lt;/ErrorBoundary&gt;&#10;                &lt;RowContextMenu&#10;                    {...contextMenuOptions}&#10;                    onRename={setRenamingEntry}&#10;                    onDelete={deleteSelected}&#10;                    onArchive={startArchiveCreation}&#10;                    onClose={() =&gt; setContextMenuOptions(prev =&gt; ({...prev, isOpen: false}))}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;            &lt;motion.div&#10;                className={&quot;max-h-[calc(100dvh_-_400px)] w-full h-screen min-h-[300px]&quot;}&#10;                initial={{opacity: 0, width: 0}}&#10;                animate={{opacity: 1, width: isEditingFile &amp;&amp; selectedEntries.length === 1 ? &quot;100%&quot; : &quot;0&quot;}}&#10;                exit={{opacity: 0, width: 0}}&#10;                transition={{duration: 0.3, ease: &quot;easeInOut&quot;}}&#10;                data-editing-file={isEditingFile &amp;&amp; selectedEntries.length === 1}&#10;            &gt;&#10;                &lt;Editor&#10;                    className={&quot;w-full h-full&quot;}&#10;                    theme={&quot;vs-dark&quot;}&#10;                    value={isEditingFile ? selectedFileContents : &quot;&quot;}&#10;                    language={getMonacoLanguage(selectedEntries[0]?.path ?? &quot;&quot;) ?? &quot;auto&quot;}&#10;                    options={{&#10;                        fontSize: 14,&#10;                        minimap: {enabled: false},&#10;                        lineNumbers: &quot;on&quot;,&#10;                        scrollBeyondLastLine: false,&#10;                        automaticLayout: true,&#10;                        wordWrap: &quot;on&quot;,&#10;                        tabSize: 2,&#10;                        contextmenu: false,&#10;                        autoClosingBrackets: &quot;always&quot;,&#10;                        autoClosingOvertype: &quot;always&quot;,&#10;                        autoClosingQuotes: &quot;always&quot;,&#10;                        // Enhanced autocompletion options&#10;                        quickSuggestions: {&#10;                            other: true,&#10;                            comments: false,&#10;                            strings: true&#10;                        },&#10;                        suggestOnTriggerCharacters: true,&#10;                        acceptSuggestionOnEnter: &quot;on&quot;,&#10;                        tabCompletion: &quot;on&quot;,&#10;                        wordBasedSuggestions: &quot;matchingDocuments&quot;,&#10;                        // Enhanced validation and hints&#10;                        parameterHints: {&#10;                            enabled: true,&#10;                            cycle: true&#10;                        },&#10;                        // Format on paste and type&#10;                        formatOnPaste: true,&#10;                        formatOnType: true,&#10;                        // Bracket matching&#10;                        matchBrackets: &quot;always&quot;,&#10;                        // Auto indentation&#10;                        autoIndent: &quot;full&quot;,&#10;                        // Folding&#10;                        folding: true,&#10;                        foldingStrategy: &quot;indentation&quot;,&#10;                        // Suggestions&#10;                        suggest: {&#10;                            showKeywords: true,&#10;                            showSnippets: true,&#10;                            showFunctions: true,&#10;                            showConstructors: true,&#10;                            showFields: true,&#10;                            showVariables: true,&#10;                            showClasses: true,&#10;                            showStructs: true,&#10;                            showInterfaces: true,&#10;                            showModules: true,&#10;                            showProperties: true,&#10;                            showEvents: true,&#10;                            showOperators: true,&#10;                            showUnits: true,&#10;                            showValues: true,&#10;                            showConstants: true,&#10;                            showEnums: true,&#10;                            showEnumMembers: true,&#10;                            showColors: true,&#10;                            showFiles: true,&#10;                            showReferences: true,&#10;                            showFolders: true,&#10;                            showTypeParameters: true,&#10;                            showUsers: true,&#10;                            showIssues: true&#10;                        }&#10;                    }}&#10;                /&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/ts/file-type-match.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/ts/file-type-match.ts" />
              <option name="originalContent" value="export type FileTypeMap = {&#10;    description: string;&#10;    extensions: string[];&#10;}&#10;&#10;export const extensionFileTypeMap: FileTypeMap[] = [&#10;    {&#10;        extensions: [&quot;doc&quot;, &quot;docm&quot;, &quot;docx&quot;],&#10;        description: &quot;Word Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dot&quot;, &quot;dotx&quot;, &quot;dotm&quot;],&#10;        description: &quot;Word Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xls&quot;, &quot;xlsx&quot;, &quot;xlsm&quot;, &quot;xlsb&quot;],&#10;        description: &quot;Excel Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xlt&quot;, &quot;xltx&quot;, &quot;xltm&quot;, &quot;xlw&quot;],&#10;        description: &quot;Excel Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ppt&quot;, &quot;pptx&quot;, &quot;pptm&quot;],&#10;        description: &quot;PowerPoint Presentation&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pot&quot;, &quot;potx&quot;, &quot;potm&quot;],&#10;        description: &quot;PowerPoint Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;odt&quot;],&#10;        description: &quot;OpenDocument Text&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ods&quot;],&#10;        description: &quot;OpenDocument Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;odp&quot;],&#10;        description: &quot;OpenDocument Presentation&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pdf&quot;],&#10;        description: &quot;PDF Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;fdf&quot;, &quot;xfdf&quot;, &quot;pdx&quot;, &quot;xdp&quot;],&#10;        description: &quot;PDF Data File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jpg&quot;, &quot;jpeg&quot;],&#10;        description: &quot;JPEG Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;png&quot;],&#10;        description: &quot;PNG Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;gif&quot;],&#10;        description: &quot;GIF Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bmp&quot;],&#10;        description: &quot;Bitmap Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;svg&quot;],&#10;        description: &quot;SVG Vector Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;webp&quot;],&#10;        description: &quot;WebP Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tiff&quot;, &quot;tif&quot;],&#10;        description: &quot;TIFF Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ico&quot;],&#10;        description: &quot;Icon File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;psd&quot;, &quot;psb&quot;, &quot;pdd&quot;],&#10;        description: &quot;Photoshop Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ai&quot;, &quot;ait&quot;, &quot;art&quot;, &quot;aip&quot;],&#10;        description: &quot;Illustrator Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;indd&quot;, &quot;indl&quot;, &quot;indt&quot;, &quot;indb&quot;],&#10;        description: &quot;InDesign Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mp4&quot;, &quot;mpeg4&quot;],&#10;        description: &quot;MP4 Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;webm&quot;],&#10;        description: &quot;WebM Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;avi&quot;],&#10;        description: &quot;AVI Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mov&quot;, &quot;qt&quot;],&#10;        description: &quot;QuickTime Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mkv&quot;],&#10;        description: &quot;Matroska Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;flv&quot;],&#10;        description: &quot;Flash Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wmv&quot;],&#10;        description: &quot;Windows Media Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mpeg&quot;, &quot;mpg&quot;],&#10;        description: &quot;MPEG Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;m4v&quot;],&#10;        description: &quot;M4V Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;3gp&quot;],&#10;        description: &quot;3GP Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ogv&quot;],&#10;        description: &quot;OGG Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mp3&quot;],&#10;        description: &quot;MP3 Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wav&quot;],&#10;        description: &quot;WAV Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ogg&quot;],&#10;        description: &quot;OGG Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;flac&quot;],&#10;        description: &quot;FLAC Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;aac&quot;],&#10;        description: &quot;AAC Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;m4a&quot;],&#10;        description: &quot;M4A Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wma&quot;],&#10;        description: &quot;Windows Media Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;aiff&quot;],&#10;        description: &quot;AIFF Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;opus&quot;],&#10;        description: &quot;Opus Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mid&quot;, &quot;midi&quot;],&#10;        description: &quot;MIDI Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;html&quot;, &quot;htm&quot;, &quot;xhtml&quot;],&#10;        description: &quot;HTML Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;css&quot;],&#10;        description: &quot;CSS Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;scss&quot;, &quot;sass&quot;],&#10;        description: &quot;Sass Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;less&quot;],&#10;        description: &quot;Less Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;js&quot;],&#10;        description: &quot;JavaScript File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsx&quot;],&#10;        description: &quot;React JSX File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ts&quot;],&#10;        description: &quot;TypeScript File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tsx&quot;],&#10;        description: &quot;React TSX File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;json&quot;],&#10;        description: &quot;JSON File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsonc&quot;, &quot;json5&quot;],&#10;        description: &quot;JSON with Comments&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;php&quot;],&#10;        description: &quot;PHP File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;asp&quot;, &quot;aspx&quot;],&#10;        description: &quot;ASP.NET File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsp&quot;],&#10;        description: &quot;JSP File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;py&quot;],&#10;        description: &quot;Python File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;java&quot;],&#10;        description: &quot;Java File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;class&quot;],&#10;        description: &quot;Java Class File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jar&quot;],&#10;        description: &quot;Java Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;c&quot;],&#10;        description: &quot;C File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;cpp&quot;, &quot;cc&quot;, &quot;cxx&quot;],&#10;        description: &quot;C++ File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;h&quot;, &quot;hpp&quot;],&#10;        description: &quot;C/C++ Header&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;cs&quot;],&#10;        description: &quot;C# File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;go&quot;],&#10;        description: &quot;Go File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rs&quot;],&#10;        description: &quot;Rust File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rb&quot;],&#10;        description: &quot;Ruby File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;swift&quot;],&#10;        description: &quot;Swift File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;kt&quot;, &quot;kts&quot;],&#10;        description: &quot;Kotlin File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;zip&quot;],&#10;        description: &quot;ZIP Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rar&quot;],&#10;        description: &quot;RAR Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;7z&quot;],&#10;        description: &quot;7-Zip Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tar&quot;],&#10;        description: &quot;TAR Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;gz&quot;, &quot;gzip&quot;],&#10;        description: &quot;GZip Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bz2&quot;, &quot;bzip2&quot;],&#10;        description: &quot;BZip2 Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xz&quot;],&#10;        description: &quot;XZ Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tgz&quot;],&#10;        description: &quot;Compressed TAR&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;zst&quot;],&#10;        description: &quot;Zstandard Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;txt&quot;],&#10;        description: &quot;Text File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;md&quot;, &quot;markdown&quot;],&#10;        description: &quot;Markdown Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rtf&quot;],&#10;        description: &quot;Rich Text Format&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;csv&quot;],&#10;        description: &quot;CSV Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xml&quot;],&#10;        description: &quot;XML Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;yaml&quot;, &quot;yml&quot;],&#10;        description: &quot;YAML File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;toml&quot;],&#10;        description: &quot;TOML File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ini&quot;, &quot;cfg&quot;, &quot;conf&quot;],&#10;        description: &quot;Configuration File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;log&quot;],&#10;        description: &quot;Log File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;exe&quot;, &quot;com&quot;],&#10;        description: &quot;Windows Executable&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;msi&quot;],&#10;        description: &quot;Windows Installer&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;app&quot;],&#10;        description: &quot;macOS Application&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dmg&quot;],&#10;        description: &quot;macOS Disk Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pkg&quot;],&#10;        description: &quot;macOS Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;deb&quot;],&#10;        description: &quot;Debian Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rpm&quot;],&#10;        description: &quot;RPM Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;appimage&quot;],&#10;        description: &quot;AppImage&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;apk&quot;],&#10;        description: &quot;Android Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sh&quot;, &quot;bash&quot;],&#10;        description: &quot;Shell Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bat&quot;, &quot;cmd&quot;],&#10;        description: &quot;Batch File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ps1&quot;],&#10;        description: &quot;PowerShell Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sql&quot;],&#10;        description: &quot;SQL Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sqlite&quot;, &quot;db&quot;],&#10;        description: &quot;SQLite Database&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mdb&quot;, &quot;accdb&quot;],&#10;        description: &quot;Access Database&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ttf&quot;],&#10;        description: &quot;TrueType Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;otf&quot;],&#10;        description: &quot;OpenType Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;woff&quot;],&#10;        description: &quot;Web Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;woff2&quot;],&#10;        description: &quot;Web Font 2.0&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;eot&quot;],&#10;        description: &quot;Embedded Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;obj&quot;],&#10;        description: &quot;3D Object&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;fbx&quot;],&#10;        description: &quot;FBX 3D Model&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;glb&quot;, &quot;gltf&quot;],&#10;        description: &quot;glTF 3D Model&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dll&quot;],&#10;        description: &quot;Windows Library&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;so&quot;],&#10;        description: &quot;Shared Object&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;o&quot;],&#10;        description: &quot;Object File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;lib&quot;],&#10;        description: &quot;C/C++ Library File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dylib&quot;],&#10;        description: &quot;macOS Library&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;iso&quot;],&#10;        description: &quot;Disk Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dat&quot;, &quot;bin&quot;],&#10;        description: &quot;Binary Data&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;properties&quot;, &quot;prop&quot;],&#10;        description: &quot;Properties File&quot;&#10;    }&#10;];&#10;&#10;export function getFileType(path: string): FileTypeMap | undefined&#10;{&#10;    let extension = getFileExtension(path);&#10;    if (extension)&#10;        return extensionFileTypeMap.find(e =&gt; e.extensions.includes(extension)) ?? undefined;&#10;    return undefined;&#10;}&#10;&#10;export function getFileExtension(path: string): string | undefined&#10;{&#10;    console.debug(`Processing file path: ${path}`);&#10;    const filename = path.replace(/\\/g, &quot;/&quot;).split(&quot;/&quot;).pop()?.toLowerCase().trim();&#10;    if (!filename)&#10;    {&#10;        console.error(&quot;No filename found&quot;);&#10;        return undefined;&#10;    }&#10;    let multi_extension = filename.split(&quot;.&quot;).slice(1);&#10;    let extension = multi_extension.length &gt; 0 ? multi_extension.join(&quot;.&quot;) : &quot;&quot;;&#10;    console.debug(`Checking multi-extension: ${extension}`);&#10;    let multi_extension_match = extensionFileTypeMap.find(e =&gt; e.extensions.includes(extension));&#10;    if (multi_extension_match)&#10;    {&#10;        console.debug(`Found multi-extension match: ${extension}`);&#10;        return extension;&#10;    } else&#10;    {&#10;        let single_extension = filename.split(&quot;.&quot;).pop()?.toLowerCase().trim();&#10;        if (!single_extension)&#10;        {&#10;            console.warn(&quot;No single extension found&quot;);&#10;            return undefined;&#10;        }&#10;        console.debug(`Checking single extension: ${single_extension}`);&#10;        let single_extension_match = extensionFileTypeMap.find(e =&gt; e.extensions.includes(single_extension));&#10;        if (single_extension_match)&#10;        {&#10;            console.debug(`Found single extension match: ${single_extension}`);&#10;            return single_extension;&#10;        }&#10;        console.warn(`No extension match found for filename: ${filename}`);&#10;    }&#10;    return multi_extension.join(&quot;.&quot;);&#10;}&#10;&#10;export function isTextFile(path: string): boolean&#10;{&#10;    const fileType = getFileType(path);&#10;    if (!fileType) return false;&#10;    return fileType.extensions.some(ext =&gt; [&quot;txt&quot;, &quot;md&quot;, &quot;json&quot;, &quot;xml&quot;, &quot;csv&quot;, &quot;yaml&quot;, &quot;yml&quot;, &quot;toml&quot;, &quot;properties&quot;, &quot;ini&quot;, &quot;cfg&quot;, &quot;conf&quot;, &quot;log&quot;, &quot;sh&quot;, &quot;bash&quot;, &quot;bat&quot;, &quot;cmd&quot;, &quot;ps1&quot;, &quot;sql&quot;, &quot;html&quot;, &quot;htm&quot;, &quot;xhtml&quot;, &quot;css&quot;, &quot;scss&quot;, &quot;sass&quot;, &quot;less&quot;, &quot;js&quot;, &quot;jsx&quot;, &quot;ts&quot;, &quot;tsx&quot;, &quot;php&quot;, &quot;py&quot;, &quot;java&quot;, &quot;c&quot;, &quot;cpp&quot;, &quot;h&quot;, &quot;hpp&quot;, &quot;cs&quot;, &quot;go&quot;, &quot;rs&quot;, &quot;rb&quot;, &quot;swift&quot;, &quot;kt&quot;, &quot;kts&quot;].includes(ext));&#10;}&#10;&#10;export function getMonacoLanguage(path: string): string | undefined&#10;{&#10;    const fileType = getFileType(path);&#10;    if (!fileType) return undefined;&#10;    switch (fileType.description)&#10;    {&#10;        case &quot;JavaScript File&quot;:&#10;            return &quot;javascript&quot;;&#10;        case &quot;TypeScript File&quot;:&#10;            return &quot;typescript&quot;;&#10;        case &quot;JSON File&quot;:&#10;            return &quot;json&quot;;&#10;        case &quot;HTML Document&quot;:&#10;            return &quot;html&quot;;&#10;        case &quot;CSS Stylesheet&quot;:&#10;            return &quot;css&quot;;&#10;        case &quot;Python File&quot;:&#10;            return &quot;python&quot;;&#10;        case &quot;Java File&quot;:&#10;            return &quot;java&quot;;&#10;        case &quot;C File&quot;:&#10;            return &quot;c&quot;;&#10;        case &quot;C++ File&quot;:&#10;            return &quot;cpp&quot;;&#10;        case &quot;C# File&quot;:&#10;            return &quot;csharp&quot;;&#10;        case &quot;Go File&quot;:&#10;            return &quot;go&quot;;&#10;        case &quot;Rust File&quot;:&#10;            return &quot;rust&quot;;&#10;        case &quot;Ruby File&quot;:&#10;            return &quot;ruby&quot;;&#10;        case &quot;Swift File&quot;:&#10;            return &quot;swift&quot;;&#10;        case &quot;Kotlin File&quot;:&#10;            return &quot;kotlin&quot;;&#10;        case &quot;Properties File&quot;:&#10;            return &quot;properties&quot;;&#10;        default:&#10;            console.warn(`No Monaco language mapping for file type: ${fileType.description}`);&#10;            return undefined;&#10;    }&#10;}" />
              <option name="updatedContent" value="export type FileTypeMap = {&#10;    description: string;&#10;    extensions: string[];&#10;}&#10;&#10;export const extensionFileTypeMap: FileTypeMap[] = [&#10;    {&#10;        extensions: [&quot;doc&quot;, &quot;docm&quot;, &quot;docx&quot;],&#10;        description: &quot;Word Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dot&quot;, &quot;dotx&quot;, &quot;dotm&quot;],&#10;        description: &quot;Word Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xls&quot;, &quot;xlsx&quot;, &quot;xlsm&quot;, &quot;xlsb&quot;],&#10;        description: &quot;Excel Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xlt&quot;, &quot;xltx&quot;, &quot;xltm&quot;, &quot;xlw&quot;],&#10;        description: &quot;Excel Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ppt&quot;, &quot;pptx&quot;, &quot;pptm&quot;],&#10;        description: &quot;PowerPoint Presentation&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pot&quot;, &quot;potx&quot;, &quot;potm&quot;],&#10;        description: &quot;PowerPoint Template&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;odt&quot;],&#10;        description: &quot;OpenDocument Text&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ods&quot;],&#10;        description: &quot;OpenDocument Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;odp&quot;],&#10;        description: &quot;OpenDocument Presentation&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pdf&quot;],&#10;        description: &quot;PDF Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;fdf&quot;, &quot;xfdf&quot;, &quot;pdx&quot;, &quot;xdp&quot;],&#10;        description: &quot;PDF Data File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jpg&quot;, &quot;jpeg&quot;],&#10;        description: &quot;JPEG Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;png&quot;],&#10;        description: &quot;PNG Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;gif&quot;],&#10;        description: &quot;GIF Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bmp&quot;],&#10;        description: &quot;Bitmap Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;svg&quot;],&#10;        description: &quot;SVG Vector Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;webp&quot;],&#10;        description: &quot;WebP Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tiff&quot;, &quot;tif&quot;],&#10;        description: &quot;TIFF Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ico&quot;],&#10;        description: &quot;Icon File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;psd&quot;, &quot;psb&quot;, &quot;pdd&quot;],&#10;        description: &quot;Photoshop Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ai&quot;, &quot;ait&quot;, &quot;art&quot;, &quot;aip&quot;],&#10;        description: &quot;Illustrator Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;indd&quot;, &quot;indl&quot;, &quot;indt&quot;, &quot;indb&quot;],&#10;        description: &quot;InDesign Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mp4&quot;, &quot;mpeg4&quot;],&#10;        description: &quot;MP4 Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;webm&quot;],&#10;        description: &quot;WebM Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;avi&quot;],&#10;        description: &quot;AVI Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mov&quot;, &quot;qt&quot;],&#10;        description: &quot;QuickTime Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mkv&quot;],&#10;        description: &quot;Matroska Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;flv&quot;],&#10;        description: &quot;Flash Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wmv&quot;],&#10;        description: &quot;Windows Media Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mpeg&quot;, &quot;mpg&quot;],&#10;        description: &quot;MPEG Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;m4v&quot;],&#10;        description: &quot;M4V Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;3gp&quot;],&#10;        description: &quot;3GP Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ogv&quot;],&#10;        description: &quot;OGG Video&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mp3&quot;],&#10;        description: &quot;MP3 Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wav&quot;],&#10;        description: &quot;WAV Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ogg&quot;],&#10;        description: &quot;OGG Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;flac&quot;],&#10;        description: &quot;FLAC Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;aac&quot;],&#10;        description: &quot;AAC Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;m4a&quot;],&#10;        description: &quot;M4A Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;wma&quot;],&#10;        description: &quot;Windows Media Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;aiff&quot;],&#10;        description: &quot;AIFF Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;opus&quot;],&#10;        description: &quot;Opus Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mid&quot;, &quot;midi&quot;],&#10;        description: &quot;MIDI Audio&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;html&quot;, &quot;htm&quot;, &quot;xhtml&quot;],&#10;        description: &quot;HTML Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;css&quot;],&#10;        description: &quot;CSS Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;scss&quot;, &quot;sass&quot;],&#10;        description: &quot;Sass Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;less&quot;],&#10;        description: &quot;Less Stylesheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;js&quot;],&#10;        description: &quot;JavaScript File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsx&quot;],&#10;        description: &quot;React JSX File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ts&quot;],&#10;        description: &quot;TypeScript File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tsx&quot;],&#10;        description: &quot;React TSX File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;json&quot;],&#10;        description: &quot;JSON File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsonc&quot;, &quot;json5&quot;],&#10;        description: &quot;JSON with Comments&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;php&quot;],&#10;        description: &quot;PHP File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;asp&quot;, &quot;aspx&quot;],&#10;        description: &quot;ASP.NET File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jsp&quot;],&#10;        description: &quot;JSP File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;py&quot;],&#10;        description: &quot;Python File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;java&quot;],&#10;        description: &quot;Java File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;class&quot;],&#10;        description: &quot;Java Class File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;jar&quot;],&#10;        description: &quot;Java Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;c&quot;],&#10;        description: &quot;C File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;cpp&quot;, &quot;cc&quot;, &quot;cxx&quot;],&#10;        description: &quot;C++ File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;h&quot;, &quot;hpp&quot;],&#10;        description: &quot;C/C++ Header&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;cs&quot;],&#10;        description: &quot;C# File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;go&quot;],&#10;        description: &quot;Go File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rs&quot;],&#10;        description: &quot;Rust File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rb&quot;],&#10;        description: &quot;Ruby File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;swift&quot;],&#10;        description: &quot;Swift File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;kt&quot;, &quot;kts&quot;],&#10;        description: &quot;Kotlin File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;zip&quot;],&#10;        description: &quot;ZIP Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rar&quot;],&#10;        description: &quot;RAR Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;7z&quot;],&#10;        description: &quot;7-Zip Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tar&quot;],&#10;        description: &quot;TAR Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;gz&quot;, &quot;gzip&quot;],&#10;        description: &quot;GZip Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bz2&quot;, &quot;bzip2&quot;],&#10;        description: &quot;BZip2 Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xz&quot;],&#10;        description: &quot;XZ Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;tgz&quot;],&#10;        description: &quot;Compressed TAR&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;zst&quot;],&#10;        description: &quot;Zstandard Archive&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;txt&quot;],&#10;        description: &quot;Text File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;md&quot;, &quot;markdown&quot;],&#10;        description: &quot;Markdown Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rtf&quot;],&#10;        description: &quot;Rich Text Format&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;csv&quot;],&#10;        description: &quot;CSV Spreadsheet&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;xml&quot;],&#10;        description: &quot;XML Document&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;yaml&quot;, &quot;yml&quot;],&#10;        description: &quot;YAML File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;toml&quot;],&#10;        description: &quot;TOML File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ini&quot;, &quot;cfg&quot;, &quot;conf&quot;],&#10;        description: &quot;Configuration File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;log&quot;],&#10;        description: &quot;Log File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;exe&quot;, &quot;com&quot;],&#10;        description: &quot;Windows Executable&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;msi&quot;],&#10;        description: &quot;Windows Installer&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;app&quot;],&#10;        description: &quot;macOS Application&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dmg&quot;],&#10;        description: &quot;macOS Disk Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;pkg&quot;],&#10;        description: &quot;macOS Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;deb&quot;],&#10;        description: &quot;Debian Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;rpm&quot;],&#10;        description: &quot;RPM Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;appimage&quot;],&#10;        description: &quot;AppImage&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;apk&quot;],&#10;        description: &quot;Android Package&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sh&quot;, &quot;bash&quot;],&#10;        description: &quot;Shell Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;bat&quot;, &quot;cmd&quot;],&#10;        description: &quot;Batch File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ps1&quot;],&#10;        description: &quot;PowerShell Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sql&quot;],&#10;        description: &quot;SQL Script&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;sqlite&quot;, &quot;db&quot;],&#10;        description: &quot;SQLite Database&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;mdb&quot;, &quot;accdb&quot;],&#10;        description: &quot;Access Database&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;ttf&quot;],&#10;        description: &quot;TrueType Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;otf&quot;],&#10;        description: &quot;OpenType Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;woff&quot;],&#10;        description: &quot;Web Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;woff2&quot;],&#10;        description: &quot;Web Font 2.0&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;eot&quot;],&#10;        description: &quot;Embedded Font&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;obj&quot;],&#10;        description: &quot;3D Object&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;fbx&quot;],&#10;        description: &quot;FBX 3D Model&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;glb&quot;, &quot;gltf&quot;],&#10;        description: &quot;glTF 3D Model&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dll&quot;],&#10;        description: &quot;Windows Library&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;so&quot;],&#10;        description: &quot;Shared Object&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;o&quot;],&#10;        description: &quot;Object File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;lib&quot;],&#10;        description: &quot;C/C++ Library File&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dylib&quot;],&#10;        description: &quot;macOS Library&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;iso&quot;],&#10;        description: &quot;Disk Image&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;dat&quot;, &quot;bin&quot;],&#10;        description: &quot;Binary Data&quot;&#10;    },&#10;    {&#10;        extensions: [&quot;properties&quot;, &quot;prop&quot;],&#10;        description: &quot;Properties File&quot;&#10;    }&#10;];&#10;&#10;export function getFileType(path: string): FileTypeMap | undefined&#10;{&#10;    let extension = getFileExtension(path);&#10;    if (extension)&#10;        return extensionFileTypeMap.find(e =&gt; e.extensions.includes(extension)) ?? undefined;&#10;    return undefined;&#10;}&#10;&#10;export function getFileExtension(path: string): string | undefined&#10;{&#10;    console.debug(`Processing file path: ${path}`);&#10;    const filename = path.replace(/\\/g, &quot;/&quot;).split(&quot;/&quot;).pop()?.toLowerCase().trim();&#10;    if (!filename)&#10;    {&#10;        console.error(&quot;No filename found&quot;);&#10;        return undefined;&#10;    }&#10;    let multi_extension = filename.split(&quot;.&quot;).slice(1);&#10;    let extension = multi_extension.length &gt; 0 ? multi_extension.join(&quot;.&quot;) : &quot;&quot;;&#10;    console.debug(`Checking multi-extension: ${extension}`);&#10;    let multi_extension_match = extensionFileTypeMap.find(e =&gt; e.extensions.includes(extension));&#10;    if (multi_extension_match)&#10;    {&#10;        console.debug(`Found multi-extension match: ${extension}`);&#10;        return extension;&#10;    } else&#10;    {&#10;        let single_extension = filename.split(&quot;.&quot;).pop()?.toLowerCase().trim();&#10;        if (!single_extension)&#10;        {&#10;            console.warn(&quot;No single extension found&quot;);&#10;            return undefined;&#10;        }&#10;        console.debug(`Checking single extension: ${single_extension}`);&#10;        let single_extension_match = extensionFileTypeMap.find(e =&gt; e.extensions.includes(single_extension));&#10;        if (single_extension_match)&#10;        {&#10;            console.debug(`Found single extension match: ${single_extension}`);&#10;            return single_extension;&#10;        }&#10;        console.warn(`No extension match found for filename: ${filename}`);&#10;    }&#10;    return multi_extension.join(&quot;.&quot;);&#10;}&#10;&#10;export function isTextFile(path: string): boolean&#10;{&#10;    const fileType = getFileType(path);&#10;    if (!fileType) return false;&#10;    return fileType.extensions.some(ext =&gt; [&quot;txt&quot;, &quot;md&quot;, &quot;json&quot;, &quot;xml&quot;, &quot;csv&quot;, &quot;yaml&quot;, &quot;yml&quot;, &quot;toml&quot;, &quot;properties&quot;, &quot;ini&quot;, &quot;cfg&quot;, &quot;conf&quot;, &quot;log&quot;, &quot;sh&quot;, &quot;bash&quot;, &quot;bat&quot;, &quot;cmd&quot;, &quot;ps1&quot;, &quot;sql&quot;, &quot;html&quot;, &quot;htm&quot;, &quot;xhtml&quot;, &quot;css&quot;, &quot;scss&quot;, &quot;sass&quot;, &quot;less&quot;, &quot;js&quot;, &quot;jsx&quot;, &quot;ts&quot;, &quot;tsx&quot;, &quot;php&quot;, &quot;py&quot;, &quot;java&quot;, &quot;c&quot;, &quot;cpp&quot;, &quot;h&quot;, &quot;hpp&quot;, &quot;cs&quot;, &quot;go&quot;, &quot;rs&quot;, &quot;rb&quot;, &quot;swift&quot;, &quot;kt&quot;, &quot;kts&quot;].includes(ext));&#10;}&#10;&#10;export function getMonacoLanguage(path: string): string | undefined&#10;{&#10;    const fileType = getFileType(path);&#10;    const filename = path.split('/').pop()?.toLowerCase();&#10;    &#10;    // Special handling for server.properties&#10;    if (filename === 'server.properties') {&#10;        return 'minecraft-properties';&#10;    }&#10;    &#10;    if (!fileType) return undefined;&#10;    switch (fileType.description)&#10;    {&#10;        case &quot;JavaScript File&quot;:&#10;            return &quot;javascript&quot;;&#10;        case &quot;TypeScript File&quot;:&#10;            return &quot;typescript&quot;;&#10;        case &quot;JSON File&quot;:&#10;            return &quot;json&quot;;&#10;        case &quot;HTML Document&quot;:&#10;            return &quot;html&quot;;&#10;        case &quot;CSS Stylesheet&quot;:&#10;            return &quot;css&quot;;&#10;        case &quot;Python File&quot;:&#10;            return &quot;python&quot;;&#10;        case &quot;Java File&quot;:&#10;            return &quot;java&quot;;&#10;        case &quot;C File&quot;:&#10;            return &quot;c&quot;;&#10;        case &quot;C++ File&quot;:&#10;            return &quot;cpp&quot;;&#10;        case &quot;C# File&quot;:&#10;            return &quot;csharp&quot;;&#10;        case &quot;Go File&quot;:&#10;            return &quot;go&quot;;&#10;        case &quot;Rust File&quot;:&#10;            return &quot;rust&quot;;&#10;        case &quot;Ruby File&quot;:&#10;            return &quot;ruby&quot;;&#10;        case &quot;Swift File&quot;:&#10;            return &quot;swift&quot;;&#10;        case &quot;Kotlin File&quot;:&#10;            return &quot;kotlin&quot;;&#10;        case &quot;Properties File&quot;:&#10;            return &quot;properties&quot;;&#10;        default:&#10;            console.warn(`No Monaco language mapping for file type: ${fileType.description}`);&#10;            return undefined;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/assets/ts/minecraft-properties-language.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/assets/ts/minecraft-properties-language.ts" />
              <option name="updatedContent" value="import * as monaco from 'monaco-editor';&#10;&#10;export const minecraftPropertiesConfig: monaco.languages.LanguageConfiguration = {&#10;    comments: {&#10;        lineComment: '#'&#10;    },&#10;    brackets: [&#10;        ['[', ']'],&#10;        ['(', ')']&#10;    ],&#10;    autoClosingPairs: [&#10;        { open: '[', close: ']' },&#10;        { open: '(', close: ')' },&#10;        { open: '&quot;', close: '&quot;' },&#10;        { open: &quot;'&quot;, close: &quot;'&quot; }&#10;    ],&#10;    surroundingPairs: [&#10;        { open: '[', close: ']' },&#10;        { open: '(', close: ')' },&#10;        { open: '&quot;', close: '&quot;' },&#10;        { open: &quot;'&quot;, close: &quot;'&quot; }&#10;    ]&#10;};&#10;&#10;export const minecraftPropertiesLanguage: monaco.languages.IMonarchLanguage = {&#10;    tokenizer: {&#10;        root: [&#10;            [/#.*$/, 'comment'],&#10;            [/^[^=]+(?==)/, 'key'],&#10;            [/=/, 'operator'],&#10;            [/.*$/, 'value']&#10;        ]&#10;    }&#10;};&#10;&#10;export const minecraftPropertiesCompletionItems: monaco.languages.CompletionItem[] = [&#10;    {&#10;        label: 'server-port',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'server-port=25565',&#10;        documentation: 'Changes the port the server is hosting (listening) on. Default: 25565'&#10;    },&#10;    {&#10;        label: 'max-players',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'max-players=20',&#10;        documentation: 'The maximum number of players that can play on the server at the same time. Default: 20'&#10;    },&#10;    {&#10;        label: 'gamemode',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'gamemode=survival',&#10;        documentation: 'Defines the mode of gameplay. Values: survival, creative, adventure, spectator. Default: survival'&#10;    },&#10;    {&#10;        label: 'difficulty',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'difficulty=easy',&#10;        documentation: 'Defines the difficulty of the server. Values: peaceful, easy, normal, hard. Default: easy'&#10;    },&#10;    {&#10;        label: 'level-name',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'level-name=world',&#10;        documentation: 'The &quot;level-name&quot; value is used as the world name and its folder name. Default: world'&#10;    },&#10;    {&#10;        label: 'level-seed',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'level-seed=',&#10;        documentation: 'Sets a world seed for the player\'s world, as in Singleplayer.'&#10;    },&#10;    {&#10;        label: 'pvp',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'pvp=true',&#10;        documentation: 'Enable PvP on the server. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'online-mode',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'online-mode=true',&#10;        documentation: 'Server checks connecting players against Minecraft account database. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'white-list',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'white-list=false',&#10;        documentation: 'Enables a whitelist on the server. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'motd',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'motd=A Minecraft Server',&#10;        documentation: 'This is the message that is displayed in the server list of the client. Default: A Minecraft Server'&#10;    },&#10;    {&#10;        label: 'view-distance',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'view-distance=10',&#10;        documentation: 'Sets the amount of world data the server sends the client (2-32). Default: 10'&#10;    },&#10;    {&#10;        label: 'spawn-protection',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'spawn-protection=16',&#10;        documentation: 'Determines the side length of the square spawn protection area. Default: 16'&#10;    },&#10;    {&#10;        label: 'enable-command-block',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'enable-command-block=false',&#10;        documentation: 'Enables command blocks. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'allow-nether',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'allow-nether=true',&#10;        documentation: 'Allows players to travel to the Nether. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'level-type',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'level-type=default',&#10;        documentation: 'Determines the type of map that is generated. Values: default, flat, largeBiomes, amplified, buffet. Default: default'&#10;    },&#10;    {&#10;        label: 'generator-settings',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'generator-settings=',&#10;        documentation: 'The settings used to customize world generation for flat, buffet, and custom worlds.'&#10;    },&#10;    {&#10;        label: 'enable-jmx-monitoring',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'enable-jmx-monitoring=false',&#10;        documentation: 'Exposes an MBean with the Object name net.minecraft.server:type=Server. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'enable-rcon',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'enable-rcon=false',&#10;        documentation: 'Enables remote access to the server console. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'rcon.port',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'rcon.port=25575',&#10;        documentation: 'Sets the RCON network port. Default: 25575'&#10;    },&#10;    {&#10;        label: 'rcon.password',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'rcon.password=',&#10;        documentation: 'Sets the password for RCON. Required if enable-rcon is true.'&#10;    },&#10;    {&#10;        label: 'query.port',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'query.port=25565',&#10;        documentation: 'Sets the query port for the server. Default: 25565'&#10;    },&#10;    {&#10;        label: 'enable-query',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'enable-query=false',&#10;        documentation: 'Enables GameSpy4 protocol server listener. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'op-permission-level',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'op-permission-level=4',&#10;        documentation: 'Sets the default permission level for ops when using /op. Values: 1-4. Default: 4'&#10;    },&#10;    {&#10;        label: 'player-idle-timeout',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'player-idle-timeout=0',&#10;        documentation: 'Kicks idle players after specified minutes. 0 to disable. Default: 0'&#10;    },&#10;    {&#10;        label: 'force-gamemode',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'force-gamemode=false',&#10;        documentation: 'Forces players to join in the default game mode. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'hardcore',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'hardcore=false',&#10;        documentation: 'If set to true, server difficulty is ignored and set to hard and players are set to spectator mode if they die. Values: true, false. Default: false'&#10;    },&#10;    {&#10;        label: 'network-compression-threshold',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'network-compression-threshold=256',&#10;        documentation: 'By default it allows packets that are n-1 bytes big to be uncompressed. Default: 256'&#10;    },&#10;    {&#10;        label: 'resource-pack',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'resource-pack=',&#10;        documentation: 'Optional URI to a resource pack. The player may choose to use it.'&#10;    },&#10;    {&#10;        label: 'resource-pack-sha1',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'resource-pack-sha1=',&#10;        documentation: 'Optional SHA-1 digest of the resource pack, in lowercase hexadecimal.'&#10;    },&#10;    {&#10;        label: 'spawn-npcs',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'spawn-npcs=true',&#10;        documentation: 'Determines if NPCs will be spawned. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'spawn-animals',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'spawn-animals=true',&#10;        documentation: 'Determines if animals will be spawned. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'spawn-monsters',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'spawn-monsters=true',&#10;        documentation: 'Determines if monsters will be spawned. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'generate-structures',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'generate-structures=true',&#10;        documentation: 'Defines whether structures (such as villages) can be generated. Values: true, false. Default: true'&#10;    },&#10;    {&#10;        label: 'simulation-distance',&#10;        kind: monaco.languages.CompletionItemKind.Property,&#10;        insertText: 'simulation-distance=10',&#10;        documentation: 'Sets the maximum distance from players that living entities may be located in order to be updated by the server. Default: 10'&#10;    }&#10;];&#10;&#10;export function registerMinecraftPropertiesLanguage() {&#10;    monaco.languages.register({ id: 'minecraft-properties' });&#10;    monaco.languages.setLanguageConfiguration('minecraft-properties', minecraftPropertiesConfig);&#10;    monaco.languages.setMonarchTokensProvider('minecraft-properties', minecraftPropertiesLanguage);&#10;    &#10;    monaco.languages.registerCompletionItemProvider('minecraft-properties', {&#10;        provideCompletionItems: (model, position) =&gt; {&#10;            const word = model.getWordUntilPosition(position);&#10;            const range = {&#10;                startLineNumber: position.lineNumber,&#10;                endLineNumber: position.lineNumber,&#10;                startColumn: word.startColumn,&#10;                endColumn: word.endColumn&#10;            };&#10;            &#10;            return {&#10;                suggestions: minecraftPropertiesCompletionItems.map(item =&gt; ({&#10;                    ...item,&#10;                    range&#10;                }))&#10;            };&#10;        }&#10;    });&#10;&#10;    // Define custom theme for Minecraft properties&#10;    monaco.editor.defineTheme('minecraft-properties-dark', {&#10;        base: 'vs-dark',&#10;        inherit: true,&#10;        rules: [&#10;            { token: 'key', foreground: '#9CDCFE' },&#10;            { token: 'value', foreground: '#CE9178' },&#10;            { token: 'comment', foreground: '#6A9955', fontStyle: 'italic' },&#10;            { token: 'operator', foreground: '#D4D4D4' }&#10;        ],&#10;        colors: {}&#10;    });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>